// Binary bg-run implements alternative to Run pattern.
// 二进制bg-run实现了run模式的替代方案。
package main

import (
	"context"
	"crypto/rsa"
	"crypto/x509"
	"encoding/pem"
	"fmt"
	"log"
	"math/big"
	"os"

	"go.uber.org/zap"

	"github.com/gotd/contrib/bg"

	"github.com/gotd/td/examples"
	"github.com/gotd/td/telegram"
)

func main() {

	log.SetFlags(log.Ldate|log.Ltime|log.Llongfile)
	log.Println("client starting ")


	// Some users find explicit client.Run(ctx, f) pattern not very convenient.
	//
	// However, it is possible to implement wrapper and use classic "Connect"
	// pattern instead.
	//
	// The `contrib/bg` package is example implementation of such pattern.

	//一些用户找到显式客户端。运行（ctx，f）模式不是很方便。
	//但是，可以实现包装器并使用经典的“Connect” 模式。
	//“contrib/bg”包就是这种模式的示例实现。

	APP_ID := 17349
	APP_HASH := "344583e45741c457fe1862106095a5eb"
	fmt.Println(APP_ID,APP_HASH)
	os.Setenv("APP_ID", "17349")
	os.Setenv("APP_HASH", "344583e45741c457fe1862106095a5eb")

	/*
	const char *kPublicRSAKeys[] = { "\
	-----BEGIN RSA PUBLIC KEY-----\n\
	MIIBCgKCAQEAwX3W9oxq8FdwkMOA/HNeeDJOx8pF6fIw4MrtbfsYPhc5yTs0lg6H\n\
	3ia4SmUTnpbJ+NhGxQX2nhDR6911SETBIq1Iz0OUuOPyDVhVhyZzF+vzBukUE75s\n\
	lPy3UzAzAyruOT5iCoX7mCDhRHWh9Rhm2HHVC02LAKM7RYx6u3WyjI4LV1a1Fpla\n\
	D0wTh1ElJQcHkRsCVJzfD2fCSrkO/F2QNuOdEe9uoyIFGZjTX82GJNd/H6DXKB4X\n\
	Q158yJifZBwZohH9q/7IYrTEGUreQyMjeL1CiROwYKSEmHOaDnLWqq4u8KSmjhqN\n\
	eQnhbTFuwG958vSX1zJOqkDkXlue/1XeMQIDAQAB\n\
	-----END RSA PUBLIC KEY-----" };
	*/
	var publicKeyStrs = `-----BEGIN RSA PUBLIC KEY-----
MIIBCgKCAQEAwX3W9oxq8FdwkMOA/HNeeDJOx8pF6fIw4MrtbfsYPhc5yTs0lg6H
3ia4SmUTnpbJ+NhGxQX2nhDR6911SETBIq1Iz0OUuOPyDVhVhyZzF+vzBukUE75s
lPy3UzAzAyruOT5iCoX7mCDhRHWh9Rhm2HHVC02LAKM7RYx6u3WyjI4LV1a1Fpla
D0wTh1ElJQcHkRsCVJzfD2fCSrkO/F2QNuOdEe9uoyIFGZjTX82GJNd/H6DXKB4X
Q158yJifZBwZohH9q/7IYrTEGUreQyMjeL1CiROwYKSEmHOaDnLWqq4u8KSmjhqN
eQnhbTFuwG958vSX1zJOqkDkXlue/1XeMQIDAQAB
-----END RSA PUBLIC KEY-----
`
	// 解析pem格式的公钥数据
	blockPub, _ := pem.Decode([]byte(publicKeyStrs))
	publicKey,_ := x509.ParsePKCS1PublicKey(blockPub.Bytes)
	fmt.Println(publicKey)




	var _ = (*big.Int)(nil)

	var PK = []*rsa.PublicKey{
		&rsa.PublicKey{
			E: 65537,
			N: new(big.Int).SetBytes([]byte{
				0xc8, 0xc1, 0x1d, 0x63, 0x56, 0x91, 0xfa, 0xc0,
				0x91, 0xdd, 0x94, 0x89, 0xae, 0xdc, 0xed, 0x29,
				0x32, 0xaa, 0x8a, 0x0b, 0xce, 0xfe, 0xf0, 0x5f,
				0xa8, 0x00, 0x89, 0x2d, 0x9b, 0x52, 0xed, 0x03,
				0x20, 0x08, 0x65, 0xc9, 0xe9, 0x72, 0x11, 0xcb,
				0x2e, 0xe6, 0xc7, 0xae, 0x96, 0xd3, 0xfb, 0x0e,
				0x15, 0xae, 0xff, 0xd6, 0x60, 0x19, 0xb4, 0x4a,
				0x08, 0xa2, 0x40, 0xcf, 0xdd, 0x28, 0x68, 0xa8,
				0x5e, 0x1f, 0x54, 0xd6, 0xfa, 0x5d, 0xea, 0xa0,
				0x41, 0xf6, 0x94, 0x1d, 0xdf, 0x30, 0x26, 0x90,
				0xd6, 0x1d, 0xc4, 0x76, 0x38, 0x5c, 0x2f, 0xa6,
				0x55, 0x14, 0x23, 0x53, 0xcb, 0x4e, 0x4b, 0x59,
				0xf6, 0xe5, 0xb6, 0x58, 0x4d, 0xb7, 0x6f, 0xe8,
				0xb1, 0x37, 0x02, 0x63, 0x24, 0x6c, 0x01, 0x0c,
				0x93, 0xd0, 0x11, 0x01, 0x41, 0x13, 0xeb, 0xdf,
				0x98, 0x7d, 0x09, 0x3f, 0x9d, 0x37, 0xc2, 0xbe,
				0x48, 0x35, 0x2d, 0x69, 0xa1, 0x68, 0x3f, 0x8f,
				0x6e, 0x6c, 0x21, 0x67, 0x98, 0x3c, 0x76, 0x1e,
				0x3a, 0xb1, 0x69, 0xfd, 0xe5, 0xda, 0xaa, 0x12,
				0x12, 0x3f, 0xa1, 0xbe, 0xab, 0x62, 0x1e, 0x4d,
				0xa5, 0x93, 0x5e, 0x9c, 0x19, 0x8f, 0x82, 0xf3,
				0x5e, 0xae, 0x58, 0x3a, 0x99, 0x38, 0x6d, 0x81,
				0x10, 0xea, 0x6b, 0xd1, 0xab, 0xb0, 0xf5, 0x68,
				0x75, 0x9f, 0x62, 0x69, 0x44, 0x19, 0xea, 0x5f,
				0x69, 0x84, 0x7c, 0x43, 0x46, 0x2a, 0xbe, 0xf8,
				0x58, 0xb4, 0xcb, 0x5e, 0xdc, 0x84, 0xe7, 0xb9,
				0x22, 0x6c, 0xd7, 0xbd, 0x7e, 0x18, 0x3a, 0xa9,
				0x74, 0xa7, 0x12, 0xc0, 0x79, 0xdd, 0xe8, 0x5b,
				0x9d, 0xc0, 0x63, 0xb8, 0xa5, 0xc0, 0x8e, 0x8f,
				0x85, 0x9c, 0x0e, 0xe5, 0xdc, 0xd8, 0x24, 0xc7,
				0x80, 0x7f, 0x20, 0x15, 0x33, 0x61, 0xa7, 0xf6,
				0x3c, 0xfd, 0x2a, 0x43, 0x3a, 0x1b, 0xe7, 0xf5,
			}),
		}, // Fingerprint: b25898df208d2603
		&rsa.PublicKey{
			E: 65537,
			N: new(big.Int).SetBytes([]byte{
				0xe8, 0xbb, 0x33, 0x05, 0xc0, 0xb5, 0x2c, 0x6c,
				0xf2, 0xaf, 0xdf, 0x76, 0x37, 0x31, 0x34, 0x89,
				0xe6, 0x3e, 0x05, 0x26, 0x8e, 0x5b, 0xad, 0xb6,
				0x01, 0xaf, 0x41, 0x77, 0x86, 0x47, 0x2e, 0x5f,
				0x93, 0xb8, 0x54, 0x38, 0x96, 0x8e, 0x20, 0xe6,
				0x72, 0x9a, 0x30, 0x1c, 0x0a, 0xfc, 0x12, 0x1b,
				0xf7, 0x15, 0x1f, 0x83, 0x44, 0x36, 0xf7, 0xfd,
				0xa6, 0x80, 0x84, 0x7a, 0x66, 0xbf, 0x64, 0xac,
				0xce, 0xc7, 0x8e, 0xe2, 0x1c, 0x0b, 0x31, 0x6f,
				0x0e, 0xda, 0xfe, 0x2f, 0x41, 0x90, 0x8d, 0xa7,
				0xbd, 0x1f, 0x4a, 0x51, 0x07, 0x63, 0x8e, 0xeb,
				0x67, 0x04, 0x0a, 0xce, 0x47, 0x2a, 0x14, 0xf9,
				0x0d, 0x9f, 0x7c, 0x2b, 0x7d, 0xef, 0x99, 0x68,
				0x8b, 0xa3, 0x07, 0x3a, 0xdb, 0x57, 0x50, 0xbb,
				0x02, 0x96, 0x49, 0x02, 0xa3, 0x59, 0xfe, 0x74,
				0x5d, 0x81, 0x70, 0xe3, 0x68, 0x76, 0xd4, 0xfd,
				0x8a, 0x5d, 0x41, 0xb2, 0xa7, 0x6c, 0xbf, 0xf9,
				0xa1, 0x32, 0x67, 0xeb, 0x95, 0x80, 0xb2, 0xd0,
				0x6d, 0x10, 0x35, 0x74, 0x48, 0xd2, 0x0d, 0x9d,
				0xa2, 0x19, 0x1c, 0xb5, 0xd8, 0xc9, 0x39, 0x82,
				0x96, 0x1c, 0xdf, 0xde, 0xda, 0x62, 0x9e, 0x37,
				0xf1, 0xfb, 0x09, 0xa0, 0x72, 0x20, 0x27, 0x69,
				0x60, 0x32, 0xfe, 0x61, 0xed, 0x66, 0x3d, 0xb7,
				0xa3, 0x7f, 0x6f, 0x26, 0x3d, 0x37, 0x0f, 0x69,
				0xdb, 0x53, 0xa0, 0xdc, 0x0a, 0x17, 0x48, 0xbd,
				0xaa, 0xff, 0x62, 0x09, 0xd5, 0x64, 0x54, 0x85,
				0xe6, 0xe0, 0x01, 0xd1, 0x95, 0x32, 0x55, 0x75,
				0x7e, 0x4b, 0x8e, 0x42, 0x81, 0x33, 0x47, 0xb1,
				0x1d, 0xa6, 0xab, 0x50, 0x0f, 0xd0, 0xac, 0xe7,
				0xe6, 0xdf, 0xa3, 0x73, 0x61, 0x99, 0xcc, 0xaf,
				0x93, 0x97, 0xed, 0x07, 0x45, 0xa4, 0x27, 0xdc,
				0xfa, 0x6c, 0xd6, 0x7b, 0xcb, 0x1a, 0xcf, 0xf3,
			}),
		}, // Fingerprint: d09d1d85de64fd85
	}

	var tgpublickeys []telegram.PublicKey
	var tgpublickey telegram.PublicKey
	//tgpublickey.RSA = publicKey
	tgpublickey.RSA = PK[0]
	tgpublickeys = append(tgpublickeys, tgpublickey)
	tgpublickey.RSA = PK[1]
	tgpublickeys = append(tgpublickeys, tgpublickey)


	examples.Run(func(ctx context.Context, log *zap.Logger) error {
		client, err := telegram.ClientFromEnvironment(telegram.Options{
			Logger: log,
			//PublicKeys: tgpublickeys,
		})
		if err != nil {
			return err
		}

		// bg.Connect will call Run in background.
		// Call stop() to disconnect and release resources.
		//bg.Connect将在后台调用Run。
		//调用stop（）断开连接并释放资源。
		fmt.Println("bg.Connect")
		stop, err := bg.Connect(client)

		if err != nil {
			return err
		}
		defer func() { _ = stop() }()

		// Now you can use client.
		//现在您可以使用客户端了。
		if _, err := client.Auth().Status(ctx); err != nil {
			return err
		}

		fmt.Println("ping")
		if pingerr := client.Ping(ctx); pingerr != nil{
			fmt.Println("pingerr",pingerr)
		}

		//fmt.Println("phoneGetCallConfig")
		//datejson,dateerr := client.API().PhoneGetCallConfig(ctx)
		//if dateerr != nil {
		//	return dateerr
		//}
		//fmt.Println(datejson.String())

		fmt.Println("AccountCheckUsername")
		bool,boolerr := client.API().AccountCheckUsername(ctx,"gghhxx")
		if boolerr != nil {
			fmt.Println( "boolerr",boolerr)
		}
		fmt.Println(bool)


		return nil
	})
}
