// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// MessageForwardOriginUser represents TL type `messageForwardOriginUser#ead478d1`.
type MessageForwardOriginUser struct {
	// Identifier of the user that originally sent the message
	SenderUserID int64
}

// MessageForwardOriginUserTypeID is TL type id of MessageForwardOriginUser.
const MessageForwardOriginUserTypeID = 0xead478d1

// construct implements constructor of MessageForwardOriginClass.
func (m MessageForwardOriginUser) construct() MessageForwardOriginClass { return &m }

// Ensuring interfaces in compile-time for MessageForwardOriginUser.
var (
	_ bin.Encoder     = &MessageForwardOriginUser{}
	_ bin.Decoder     = &MessageForwardOriginUser{}
	_ bin.BareEncoder = &MessageForwardOriginUser{}
	_ bin.BareDecoder = &MessageForwardOriginUser{}

	_ MessageForwardOriginClass = &MessageForwardOriginUser{}
)

func (m *MessageForwardOriginUser) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.SenderUserID == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageForwardOriginUser) String() string {
	if m == nil {
		return "MessageForwardOriginUser(nil)"
	}
	type Alias MessageForwardOriginUser
	return fmt.Sprintf("MessageForwardOriginUser%+v", Alias(*m))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessageForwardOriginUser) TypeID() uint32 {
	return MessageForwardOriginUserTypeID
}

// TypeName returns name of type in TL schema.
func (*MessageForwardOriginUser) TypeName() string {
	return "messageForwardOriginUser"
}

// TypeInfo returns info about TL type.
func (m *MessageForwardOriginUser) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messageForwardOriginUser",
		ID:   MessageForwardOriginUserTypeID,
	}
	if m == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "SenderUserID",
			SchemaName: "sender_user_id",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (m *MessageForwardOriginUser) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageForwardOriginUser#ead478d1 as nil")
	}
	b.PutID(MessageForwardOriginUserTypeID)
	return m.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (m *MessageForwardOriginUser) EncodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageForwardOriginUser#ead478d1 as nil")
	}
	b.PutInt53(m.SenderUserID)
	return nil
}

// Decode implements bin.Decoder.
func (m *MessageForwardOriginUser) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageForwardOriginUser#ead478d1 to nil")
	}
	if err := b.ConsumeID(MessageForwardOriginUserTypeID); err != nil {
		return fmt.Errorf("unable to decode messageForwardOriginUser#ead478d1: %w", err)
	}
	return m.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (m *MessageForwardOriginUser) DecodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageForwardOriginUser#ead478d1 to nil")
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode messageForwardOriginUser#ead478d1: field sender_user_id: %w", err)
		}
		m.SenderUserID = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (m *MessageForwardOriginUser) EncodeTDLibJSON(b tdjson.Encoder) error {
	if m == nil {
		return fmt.Errorf("can't encode messageForwardOriginUser#ead478d1 as nil")
	}
	b.ObjStart()
	b.PutID("messageForwardOriginUser")
	b.Comma()
	b.FieldStart("sender_user_id")
	b.PutInt53(m.SenderUserID)
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (m *MessageForwardOriginUser) DecodeTDLibJSON(b tdjson.Decoder) error {
	if m == nil {
		return fmt.Errorf("can't decode messageForwardOriginUser#ead478d1 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("messageForwardOriginUser"); err != nil {
				return fmt.Errorf("unable to decode messageForwardOriginUser#ead478d1: %w", err)
			}
		case "sender_user_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode messageForwardOriginUser#ead478d1: field sender_user_id: %w", err)
			}
			m.SenderUserID = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetSenderUserID returns value of SenderUserID field.
func (m *MessageForwardOriginUser) GetSenderUserID() (value int64) {
	if m == nil {
		return
	}
	return m.SenderUserID
}

// MessageForwardOriginChat represents TL type `messageForwardOriginChat#5af51364`.
type MessageForwardOriginChat struct {
	// Identifier of the chat that originally sent the message
	SenderChatID int64
	// For messages originally sent by an anonymous chat administrator, original message
	// author signature
	AuthorSignature string
}

// MessageForwardOriginChatTypeID is TL type id of MessageForwardOriginChat.
const MessageForwardOriginChatTypeID = 0x5af51364

// construct implements constructor of MessageForwardOriginClass.
func (m MessageForwardOriginChat) construct() MessageForwardOriginClass { return &m }

// Ensuring interfaces in compile-time for MessageForwardOriginChat.
var (
	_ bin.Encoder     = &MessageForwardOriginChat{}
	_ bin.Decoder     = &MessageForwardOriginChat{}
	_ bin.BareEncoder = &MessageForwardOriginChat{}
	_ bin.BareDecoder = &MessageForwardOriginChat{}

	_ MessageForwardOriginClass = &MessageForwardOriginChat{}
)

func (m *MessageForwardOriginChat) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.SenderChatID == 0) {
		return false
	}
	if !(m.AuthorSignature == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageForwardOriginChat) String() string {
	if m == nil {
		return "MessageForwardOriginChat(nil)"
	}
	type Alias MessageForwardOriginChat
	return fmt.Sprintf("MessageForwardOriginChat%+v", Alias(*m))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessageForwardOriginChat) TypeID() uint32 {
	return MessageForwardOriginChatTypeID
}

// TypeName returns name of type in TL schema.
func (*MessageForwardOriginChat) TypeName() string {
	return "messageForwardOriginChat"
}

// TypeInfo returns info about TL type.
func (m *MessageForwardOriginChat) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messageForwardOriginChat",
		ID:   MessageForwardOriginChatTypeID,
	}
	if m == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "SenderChatID",
			SchemaName: "sender_chat_id",
		},
		{
			Name:       "AuthorSignature",
			SchemaName: "author_signature",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (m *MessageForwardOriginChat) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageForwardOriginChat#5af51364 as nil")
	}
	b.PutID(MessageForwardOriginChatTypeID)
	return m.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (m *MessageForwardOriginChat) EncodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageForwardOriginChat#5af51364 as nil")
	}
	b.PutInt53(m.SenderChatID)
	b.PutString(m.AuthorSignature)
	return nil
}

// Decode implements bin.Decoder.
func (m *MessageForwardOriginChat) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageForwardOriginChat#5af51364 to nil")
	}
	if err := b.ConsumeID(MessageForwardOriginChatTypeID); err != nil {
		return fmt.Errorf("unable to decode messageForwardOriginChat#5af51364: %w", err)
	}
	return m.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (m *MessageForwardOriginChat) DecodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageForwardOriginChat#5af51364 to nil")
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode messageForwardOriginChat#5af51364: field sender_chat_id: %w", err)
		}
		m.SenderChatID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode messageForwardOriginChat#5af51364: field author_signature: %w", err)
		}
		m.AuthorSignature = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (m *MessageForwardOriginChat) EncodeTDLibJSON(b tdjson.Encoder) error {
	if m == nil {
		return fmt.Errorf("can't encode messageForwardOriginChat#5af51364 as nil")
	}
	b.ObjStart()
	b.PutID("messageForwardOriginChat")
	b.Comma()
	b.FieldStart("sender_chat_id")
	b.PutInt53(m.SenderChatID)
	b.Comma()
	b.FieldStart("author_signature")
	b.PutString(m.AuthorSignature)
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (m *MessageForwardOriginChat) DecodeTDLibJSON(b tdjson.Decoder) error {
	if m == nil {
		return fmt.Errorf("can't decode messageForwardOriginChat#5af51364 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("messageForwardOriginChat"); err != nil {
				return fmt.Errorf("unable to decode messageForwardOriginChat#5af51364: %w", err)
			}
		case "sender_chat_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode messageForwardOriginChat#5af51364: field sender_chat_id: %w", err)
			}
			m.SenderChatID = value
		case "author_signature":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode messageForwardOriginChat#5af51364: field author_signature: %w", err)
			}
			m.AuthorSignature = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetSenderChatID returns value of SenderChatID field.
func (m *MessageForwardOriginChat) GetSenderChatID() (value int64) {
	if m == nil {
		return
	}
	return m.SenderChatID
}

// GetAuthorSignature returns value of AuthorSignature field.
func (m *MessageForwardOriginChat) GetAuthorSignature() (value string) {
	if m == nil {
		return
	}
	return m.AuthorSignature
}

// MessageForwardOriginHiddenUser represents TL type `messageForwardOriginHiddenUser#efd4eee3`.
type MessageForwardOriginHiddenUser struct {
	// Name of the sender
	SenderName string
}

// MessageForwardOriginHiddenUserTypeID is TL type id of MessageForwardOriginHiddenUser.
const MessageForwardOriginHiddenUserTypeID = 0xefd4eee3

// construct implements constructor of MessageForwardOriginClass.
func (m MessageForwardOriginHiddenUser) construct() MessageForwardOriginClass { return &m }

// Ensuring interfaces in compile-time for MessageForwardOriginHiddenUser.
var (
	_ bin.Encoder     = &MessageForwardOriginHiddenUser{}
	_ bin.Decoder     = &MessageForwardOriginHiddenUser{}
	_ bin.BareEncoder = &MessageForwardOriginHiddenUser{}
	_ bin.BareDecoder = &MessageForwardOriginHiddenUser{}

	_ MessageForwardOriginClass = &MessageForwardOriginHiddenUser{}
)

func (m *MessageForwardOriginHiddenUser) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.SenderName == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageForwardOriginHiddenUser) String() string {
	if m == nil {
		return "MessageForwardOriginHiddenUser(nil)"
	}
	type Alias MessageForwardOriginHiddenUser
	return fmt.Sprintf("MessageForwardOriginHiddenUser%+v", Alias(*m))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessageForwardOriginHiddenUser) TypeID() uint32 {
	return MessageForwardOriginHiddenUserTypeID
}

// TypeName returns name of type in TL schema.
func (*MessageForwardOriginHiddenUser) TypeName() string {
	return "messageForwardOriginHiddenUser"
}

// TypeInfo returns info about TL type.
func (m *MessageForwardOriginHiddenUser) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messageForwardOriginHiddenUser",
		ID:   MessageForwardOriginHiddenUserTypeID,
	}
	if m == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "SenderName",
			SchemaName: "sender_name",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (m *MessageForwardOriginHiddenUser) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageForwardOriginHiddenUser#efd4eee3 as nil")
	}
	b.PutID(MessageForwardOriginHiddenUserTypeID)
	return m.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (m *MessageForwardOriginHiddenUser) EncodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageForwardOriginHiddenUser#efd4eee3 as nil")
	}
	b.PutString(m.SenderName)
	return nil
}

// Decode implements bin.Decoder.
func (m *MessageForwardOriginHiddenUser) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageForwardOriginHiddenUser#efd4eee3 to nil")
	}
	if err := b.ConsumeID(MessageForwardOriginHiddenUserTypeID); err != nil {
		return fmt.Errorf("unable to decode messageForwardOriginHiddenUser#efd4eee3: %w", err)
	}
	return m.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (m *MessageForwardOriginHiddenUser) DecodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageForwardOriginHiddenUser#efd4eee3 to nil")
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode messageForwardOriginHiddenUser#efd4eee3: field sender_name: %w", err)
		}
		m.SenderName = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (m *MessageForwardOriginHiddenUser) EncodeTDLibJSON(b tdjson.Encoder) error {
	if m == nil {
		return fmt.Errorf("can't encode messageForwardOriginHiddenUser#efd4eee3 as nil")
	}
	b.ObjStart()
	b.PutID("messageForwardOriginHiddenUser")
	b.Comma()
	b.FieldStart("sender_name")
	b.PutString(m.SenderName)
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (m *MessageForwardOriginHiddenUser) DecodeTDLibJSON(b tdjson.Decoder) error {
	if m == nil {
		return fmt.Errorf("can't decode messageForwardOriginHiddenUser#efd4eee3 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("messageForwardOriginHiddenUser"); err != nil {
				return fmt.Errorf("unable to decode messageForwardOriginHiddenUser#efd4eee3: %w", err)
			}
		case "sender_name":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode messageForwardOriginHiddenUser#efd4eee3: field sender_name: %w", err)
			}
			m.SenderName = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetSenderName returns value of SenderName field.
func (m *MessageForwardOriginHiddenUser) GetSenderName() (value string) {
	if m == nil {
		return
	}
	return m.SenderName
}

// MessageForwardOriginChannel represents TL type `messageForwardOriginChannel#58dabee3`.
type MessageForwardOriginChannel struct {
	// Identifier of the chat from which the message was originally forwarded
	ChatID int64
	// Message identifier of the original message
	MessageID int64
	// Original post author signature
	AuthorSignature string
}

// MessageForwardOriginChannelTypeID is TL type id of MessageForwardOriginChannel.
const MessageForwardOriginChannelTypeID = 0x58dabee3

// construct implements constructor of MessageForwardOriginClass.
func (m MessageForwardOriginChannel) construct() MessageForwardOriginClass { return &m }

// Ensuring interfaces in compile-time for MessageForwardOriginChannel.
var (
	_ bin.Encoder     = &MessageForwardOriginChannel{}
	_ bin.Decoder     = &MessageForwardOriginChannel{}
	_ bin.BareEncoder = &MessageForwardOriginChannel{}
	_ bin.BareDecoder = &MessageForwardOriginChannel{}

	_ MessageForwardOriginClass = &MessageForwardOriginChannel{}
)

func (m *MessageForwardOriginChannel) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.ChatID == 0) {
		return false
	}
	if !(m.MessageID == 0) {
		return false
	}
	if !(m.AuthorSignature == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageForwardOriginChannel) String() string {
	if m == nil {
		return "MessageForwardOriginChannel(nil)"
	}
	type Alias MessageForwardOriginChannel
	return fmt.Sprintf("MessageForwardOriginChannel%+v", Alias(*m))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessageForwardOriginChannel) TypeID() uint32 {
	return MessageForwardOriginChannelTypeID
}

// TypeName returns name of type in TL schema.
func (*MessageForwardOriginChannel) TypeName() string {
	return "messageForwardOriginChannel"
}

// TypeInfo returns info about TL type.
func (m *MessageForwardOriginChannel) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messageForwardOriginChannel",
		ID:   MessageForwardOriginChannelTypeID,
	}
	if m == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ChatID",
			SchemaName: "chat_id",
		},
		{
			Name:       "MessageID",
			SchemaName: "message_id",
		},
		{
			Name:       "AuthorSignature",
			SchemaName: "author_signature",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (m *MessageForwardOriginChannel) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageForwardOriginChannel#58dabee3 as nil")
	}
	b.PutID(MessageForwardOriginChannelTypeID)
	return m.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (m *MessageForwardOriginChannel) EncodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageForwardOriginChannel#58dabee3 as nil")
	}
	b.PutInt53(m.ChatID)
	b.PutInt53(m.MessageID)
	b.PutString(m.AuthorSignature)
	return nil
}

// Decode implements bin.Decoder.
func (m *MessageForwardOriginChannel) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageForwardOriginChannel#58dabee3 to nil")
	}
	if err := b.ConsumeID(MessageForwardOriginChannelTypeID); err != nil {
		return fmt.Errorf("unable to decode messageForwardOriginChannel#58dabee3: %w", err)
	}
	return m.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (m *MessageForwardOriginChannel) DecodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageForwardOriginChannel#58dabee3 to nil")
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode messageForwardOriginChannel#58dabee3: field chat_id: %w", err)
		}
		m.ChatID = value
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode messageForwardOriginChannel#58dabee3: field message_id: %w", err)
		}
		m.MessageID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode messageForwardOriginChannel#58dabee3: field author_signature: %w", err)
		}
		m.AuthorSignature = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (m *MessageForwardOriginChannel) EncodeTDLibJSON(b tdjson.Encoder) error {
	if m == nil {
		return fmt.Errorf("can't encode messageForwardOriginChannel#58dabee3 as nil")
	}
	b.ObjStart()
	b.PutID("messageForwardOriginChannel")
	b.Comma()
	b.FieldStart("chat_id")
	b.PutInt53(m.ChatID)
	b.Comma()
	b.FieldStart("message_id")
	b.PutInt53(m.MessageID)
	b.Comma()
	b.FieldStart("author_signature")
	b.PutString(m.AuthorSignature)
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (m *MessageForwardOriginChannel) DecodeTDLibJSON(b tdjson.Decoder) error {
	if m == nil {
		return fmt.Errorf("can't decode messageForwardOriginChannel#58dabee3 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("messageForwardOriginChannel"); err != nil {
				return fmt.Errorf("unable to decode messageForwardOriginChannel#58dabee3: %w", err)
			}
		case "chat_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode messageForwardOriginChannel#58dabee3: field chat_id: %w", err)
			}
			m.ChatID = value
		case "message_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode messageForwardOriginChannel#58dabee3: field message_id: %w", err)
			}
			m.MessageID = value
		case "author_signature":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode messageForwardOriginChannel#58dabee3: field author_signature: %w", err)
			}
			m.AuthorSignature = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetChatID returns value of ChatID field.
func (m *MessageForwardOriginChannel) GetChatID() (value int64) {
	if m == nil {
		return
	}
	return m.ChatID
}

// GetMessageID returns value of MessageID field.
func (m *MessageForwardOriginChannel) GetMessageID() (value int64) {
	if m == nil {
		return
	}
	return m.MessageID
}

// GetAuthorSignature returns value of AuthorSignature field.
func (m *MessageForwardOriginChannel) GetAuthorSignature() (value string) {
	if m == nil {
		return
	}
	return m.AuthorSignature
}

// MessageForwardOriginClassName is schema name of MessageForwardOriginClass.
const MessageForwardOriginClassName = "MessageForwardOrigin"

// MessageForwardOriginClass represents MessageForwardOrigin generic type.
//
// Example:
//
//	g, err := tdapi.DecodeMessageForwardOrigin(buf)
//	if err != nil {
//	    panic(err)
//	}
//	switch v := g.(type) {
//	case *tdapi.MessageForwardOriginUser: // messageForwardOriginUser#ead478d1
//	case *tdapi.MessageForwardOriginChat: // messageForwardOriginChat#5af51364
//	case *tdapi.MessageForwardOriginHiddenUser: // messageForwardOriginHiddenUser#efd4eee3
//	case *tdapi.MessageForwardOriginChannel: // messageForwardOriginChannel#58dabee3
//	default: panic(v)
//	}
type MessageForwardOriginClass interface {
	bin.Encoder
	bin.Decoder
	bin.BareEncoder
	bin.BareDecoder
	construct() MessageForwardOriginClass

	// TypeID returns type id in TL schema.
	//
	// See https://core.telegram.org/mtproto/TL-tl#remarks.
	TypeID() uint32
	// TypeName returns name of type in TL schema.
	TypeName() string
	// String implements fmt.Stringer.
	String() string
	// Zero returns true if current object has a zero value.
	Zero() bool

	EncodeTDLibJSON(b tdjson.Encoder) error
	DecodeTDLibJSON(b tdjson.Decoder) error
}

// DecodeMessageForwardOrigin implements binary de-serialization for MessageForwardOriginClass.
func DecodeMessageForwardOrigin(buf *bin.Buffer) (MessageForwardOriginClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case MessageForwardOriginUserTypeID:
		// Decoding messageForwardOriginUser#ead478d1.
		v := MessageForwardOriginUser{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageForwardOriginClass: %w", err)
		}
		return &v, nil
	case MessageForwardOriginChatTypeID:
		// Decoding messageForwardOriginChat#5af51364.
		v := MessageForwardOriginChat{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageForwardOriginClass: %w", err)
		}
		return &v, nil
	case MessageForwardOriginHiddenUserTypeID:
		// Decoding messageForwardOriginHiddenUser#efd4eee3.
		v := MessageForwardOriginHiddenUser{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageForwardOriginClass: %w", err)
		}
		return &v, nil
	case MessageForwardOriginChannelTypeID:
		// Decoding messageForwardOriginChannel#58dabee3.
		v := MessageForwardOriginChannel{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageForwardOriginClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode MessageForwardOriginClass: %w", bin.NewUnexpectedID(id))
	}
}

// DecodeTDLibJSONMessageForwardOrigin implements binary de-serialization for MessageForwardOriginClass.
func DecodeTDLibJSONMessageForwardOrigin(buf tdjson.Decoder) (MessageForwardOriginClass, error) {
	id, err := buf.FindTypeID()
	if err != nil {
		return nil, err
	}
	switch id {
	case "messageForwardOriginUser":
		// Decoding messageForwardOriginUser#ead478d1.
		v := MessageForwardOriginUser{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageForwardOriginClass: %w", err)
		}
		return &v, nil
	case "messageForwardOriginChat":
		// Decoding messageForwardOriginChat#5af51364.
		v := MessageForwardOriginChat{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageForwardOriginClass: %w", err)
		}
		return &v, nil
	case "messageForwardOriginHiddenUser":
		// Decoding messageForwardOriginHiddenUser#efd4eee3.
		v := MessageForwardOriginHiddenUser{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageForwardOriginClass: %w", err)
		}
		return &v, nil
	case "messageForwardOriginChannel":
		// Decoding messageForwardOriginChannel#58dabee3.
		v := MessageForwardOriginChannel{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageForwardOriginClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode MessageForwardOriginClass: %w", tdjson.NewUnexpectedID(id))
	}
}

// MessageForwardOrigin boxes the MessageForwardOriginClass providing a helper.
type MessageForwardOriginBox struct {
	MessageForwardOrigin MessageForwardOriginClass
}

// Decode implements bin.Decoder for MessageForwardOriginBox.
func (b *MessageForwardOriginBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode MessageForwardOriginBox to nil")
	}
	v, err := DecodeMessageForwardOrigin(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.MessageForwardOrigin = v
	return nil
}

// Encode implements bin.Encode for MessageForwardOriginBox.
func (b *MessageForwardOriginBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.MessageForwardOrigin == nil {
		return fmt.Errorf("unable to encode MessageForwardOriginClass as nil")
	}
	return b.MessageForwardOrigin.Encode(buf)
}

// DecodeTDLibJSON implements bin.Decoder for MessageForwardOriginBox.
func (b *MessageForwardOriginBox) DecodeTDLibJSON(buf tdjson.Decoder) error {
	if b == nil {
		return fmt.Errorf("unable to decode MessageForwardOriginBox to nil")
	}
	v, err := DecodeTDLibJSONMessageForwardOrigin(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.MessageForwardOrigin = v
	return nil
}

// EncodeTDLibJSON implements bin.Encode for MessageForwardOriginBox.
func (b *MessageForwardOriginBox) EncodeTDLibJSON(buf tdjson.Encoder) error {
	if b == nil || b.MessageForwardOrigin == nil {
		return fmt.Errorf("unable to encode MessageForwardOriginClass as nil")
	}
	return b.MessageForwardOrigin.EncodeTDLibJSON(buf)
}
