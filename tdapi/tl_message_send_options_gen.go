// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// MessageSendOptions represents TL type `messageSendOptions#1f60b9e`.
type MessageSendOptions struct {
	// Pass true to disable notification for the message
	DisableNotification bool
	// Pass true if the message is sent from the background
	FromBackground bool
	// Pass true if the content of the message must be protected from forwarding and saving;
	// for bots only
	ProtectContent bool
	// Pass true if the user explicitly chosen a sticker or a custom emoji from an installed
	// sticker set; applicable only to sendMessage and sendMessageAlbum
	UpdateOrderOfInstalledStickerSets bool
	// Message scheduling state; pass null to send message immediately. Messages sent to a
	// secret chat, live location messages and self-destructing messages can't be scheduled
	SchedulingState MessageSchedulingStateClass
	// Non-persistent identifier, which will be returned back in messageSendingStatePending
	// object and can be used to match sent messages and corresponding updateNewMessage
	// updates
	SendingID int32
}

// MessageSendOptionsTypeID is TL type id of MessageSendOptions.
const MessageSendOptionsTypeID = 0x1f60b9e

// Ensuring interfaces in compile-time for MessageSendOptions.
var (
	_ bin.Encoder     = &MessageSendOptions{}
	_ bin.Decoder     = &MessageSendOptions{}
	_ bin.BareEncoder = &MessageSendOptions{}
	_ bin.BareDecoder = &MessageSendOptions{}
)

func (m *MessageSendOptions) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.DisableNotification == false) {
		return false
	}
	if !(m.FromBackground == false) {
		return false
	}
	if !(m.ProtectContent == false) {
		return false
	}
	if !(m.UpdateOrderOfInstalledStickerSets == false) {
		return false
	}
	if !(m.SchedulingState == nil) {
		return false
	}
	if !(m.SendingID == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageSendOptions) String() string {
	if m == nil {
		return "MessageSendOptions(nil)"
	}
	type Alias MessageSendOptions
	return fmt.Sprintf("MessageSendOptions%+v", Alias(*m))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessageSendOptions) TypeID() uint32 {
	return MessageSendOptionsTypeID
}

// TypeName returns name of type in TL schema.
func (*MessageSendOptions) TypeName() string {
	return "messageSendOptions"
}

// TypeInfo returns info about TL type.
func (m *MessageSendOptions) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messageSendOptions",
		ID:   MessageSendOptionsTypeID,
	}
	if m == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "DisableNotification",
			SchemaName: "disable_notification",
		},
		{
			Name:       "FromBackground",
			SchemaName: "from_background",
		},
		{
			Name:       "ProtectContent",
			SchemaName: "protect_content",
		},
		{
			Name:       "UpdateOrderOfInstalledStickerSets",
			SchemaName: "update_order_of_installed_sticker_sets",
		},
		{
			Name:       "SchedulingState",
			SchemaName: "scheduling_state",
		},
		{
			Name:       "SendingID",
			SchemaName: "sending_id",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (m *MessageSendOptions) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageSendOptions#1f60b9e as nil")
	}
	b.PutID(MessageSendOptionsTypeID)
	return m.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (m *MessageSendOptions) EncodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageSendOptions#1f60b9e as nil")
	}
	b.PutBool(m.DisableNotification)
	b.PutBool(m.FromBackground)
	b.PutBool(m.ProtectContent)
	b.PutBool(m.UpdateOrderOfInstalledStickerSets)
	if m.SchedulingState == nil {
		return fmt.Errorf("unable to encode messageSendOptions#1f60b9e: field scheduling_state is nil")
	}
	if err := m.SchedulingState.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messageSendOptions#1f60b9e: field scheduling_state: %w", err)
	}
	b.PutInt32(m.SendingID)
	return nil
}

// Decode implements bin.Decoder.
func (m *MessageSendOptions) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageSendOptions#1f60b9e to nil")
	}
	if err := b.ConsumeID(MessageSendOptionsTypeID); err != nil {
		return fmt.Errorf("unable to decode messageSendOptions#1f60b9e: %w", err)
	}
	return m.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (m *MessageSendOptions) DecodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageSendOptions#1f60b9e to nil")
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode messageSendOptions#1f60b9e: field disable_notification: %w", err)
		}
		m.DisableNotification = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode messageSendOptions#1f60b9e: field from_background: %w", err)
		}
		m.FromBackground = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode messageSendOptions#1f60b9e: field protect_content: %w", err)
		}
		m.ProtectContent = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode messageSendOptions#1f60b9e: field update_order_of_installed_sticker_sets: %w", err)
		}
		m.UpdateOrderOfInstalledStickerSets = value
	}
	{
		value, err := DecodeMessageSchedulingState(b)
		if err != nil {
			return fmt.Errorf("unable to decode messageSendOptions#1f60b9e: field scheduling_state: %w", err)
		}
		m.SchedulingState = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode messageSendOptions#1f60b9e: field sending_id: %w", err)
		}
		m.SendingID = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (m *MessageSendOptions) EncodeTDLibJSON(b tdjson.Encoder) error {
	if m == nil {
		return fmt.Errorf("can't encode messageSendOptions#1f60b9e as nil")
	}
	b.ObjStart()
	b.PutID("messageSendOptions")
	b.Comma()
	b.FieldStart("disable_notification")
	b.PutBool(m.DisableNotification)
	b.Comma()
	b.FieldStart("from_background")
	b.PutBool(m.FromBackground)
	b.Comma()
	b.FieldStart("protect_content")
	b.PutBool(m.ProtectContent)
	b.Comma()
	b.FieldStart("update_order_of_installed_sticker_sets")
	b.PutBool(m.UpdateOrderOfInstalledStickerSets)
	b.Comma()
	b.FieldStart("scheduling_state")
	if m.SchedulingState == nil {
		return fmt.Errorf("unable to encode messageSendOptions#1f60b9e: field scheduling_state is nil")
	}
	if err := m.SchedulingState.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode messageSendOptions#1f60b9e: field scheduling_state: %w", err)
	}
	b.Comma()
	b.FieldStart("sending_id")
	b.PutInt32(m.SendingID)
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (m *MessageSendOptions) DecodeTDLibJSON(b tdjson.Decoder) error {
	if m == nil {
		return fmt.Errorf("can't decode messageSendOptions#1f60b9e to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("messageSendOptions"); err != nil {
				return fmt.Errorf("unable to decode messageSendOptions#1f60b9e: %w", err)
			}
		case "disable_notification":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode messageSendOptions#1f60b9e: field disable_notification: %w", err)
			}
			m.DisableNotification = value
		case "from_background":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode messageSendOptions#1f60b9e: field from_background: %w", err)
			}
			m.FromBackground = value
		case "protect_content":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode messageSendOptions#1f60b9e: field protect_content: %w", err)
			}
			m.ProtectContent = value
		case "update_order_of_installed_sticker_sets":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode messageSendOptions#1f60b9e: field update_order_of_installed_sticker_sets: %w", err)
			}
			m.UpdateOrderOfInstalledStickerSets = value
		case "scheduling_state":
			value, err := DecodeTDLibJSONMessageSchedulingState(b)
			if err != nil {
				return fmt.Errorf("unable to decode messageSendOptions#1f60b9e: field scheduling_state: %w", err)
			}
			m.SchedulingState = value
		case "sending_id":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode messageSendOptions#1f60b9e: field sending_id: %w", err)
			}
			m.SendingID = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetDisableNotification returns value of DisableNotification field.
func (m *MessageSendOptions) GetDisableNotification() (value bool) {
	if m == nil {
		return
	}
	return m.DisableNotification
}

// GetFromBackground returns value of FromBackground field.
func (m *MessageSendOptions) GetFromBackground() (value bool) {
	if m == nil {
		return
	}
	return m.FromBackground
}

// GetProtectContent returns value of ProtectContent field.
func (m *MessageSendOptions) GetProtectContent() (value bool) {
	if m == nil {
		return
	}
	return m.ProtectContent
}

// GetUpdateOrderOfInstalledStickerSets returns value of UpdateOrderOfInstalledStickerSets field.
func (m *MessageSendOptions) GetUpdateOrderOfInstalledStickerSets() (value bool) {
	if m == nil {
		return
	}
	return m.UpdateOrderOfInstalledStickerSets
}

// GetSchedulingState returns value of SchedulingState field.
func (m *MessageSendOptions) GetSchedulingState() (value MessageSchedulingStateClass) {
	if m == nil {
		return
	}
	return m.SchedulingState
}

// GetSendingID returns value of SendingID field.
func (m *MessageSendOptions) GetSendingID() (value int32) {
	if m == nil {
		return
	}
	return m.SendingID
}
