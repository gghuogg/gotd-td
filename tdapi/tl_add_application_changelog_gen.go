// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// AddApplicationChangelogRequest represents TL type `addApplicationChangelog#8bf37fc9`.
type AddApplicationChangelogRequest struct {
	// The previous application version
	PreviousApplicationVersion string
}

// AddApplicationChangelogRequestTypeID is TL type id of AddApplicationChangelogRequest.
const AddApplicationChangelogRequestTypeID = 0x8bf37fc9

// Ensuring interfaces in compile-time for AddApplicationChangelogRequest.
var (
	_ bin.Encoder     = &AddApplicationChangelogRequest{}
	_ bin.Decoder     = &AddApplicationChangelogRequest{}
	_ bin.BareEncoder = &AddApplicationChangelogRequest{}
	_ bin.BareDecoder = &AddApplicationChangelogRequest{}
)

func (a *AddApplicationChangelogRequest) Zero() bool {
	if a == nil {
		return true
	}
	if !(a.PreviousApplicationVersion == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (a *AddApplicationChangelogRequest) String() string {
	if a == nil {
		return "AddApplicationChangelogRequest(nil)"
	}
	type Alias AddApplicationChangelogRequest
	return fmt.Sprintf("AddApplicationChangelogRequest%+v", Alias(*a))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*AddApplicationChangelogRequest) TypeID() uint32 {
	return AddApplicationChangelogRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*AddApplicationChangelogRequest) TypeName() string {
	return "addApplicationChangelog"
}

// TypeInfo returns info about TL type.
func (a *AddApplicationChangelogRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "addApplicationChangelog",
		ID:   AddApplicationChangelogRequestTypeID,
	}
	if a == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "PreviousApplicationVersion",
			SchemaName: "previous_application_version",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (a *AddApplicationChangelogRequest) Encode(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't encode addApplicationChangelog#8bf37fc9 as nil")
	}
	b.PutID(AddApplicationChangelogRequestTypeID)
	return a.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (a *AddApplicationChangelogRequest) EncodeBare(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't encode addApplicationChangelog#8bf37fc9 as nil")
	}
	b.PutString(a.PreviousApplicationVersion)
	return nil
}

// Decode implements bin.Decoder.
func (a *AddApplicationChangelogRequest) Decode(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't decode addApplicationChangelog#8bf37fc9 to nil")
	}
	if err := b.ConsumeID(AddApplicationChangelogRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode addApplicationChangelog#8bf37fc9: %w", err)
	}
	return a.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (a *AddApplicationChangelogRequest) DecodeBare(b *bin.Buffer) error {
	if a == nil {
		return fmt.Errorf("can't decode addApplicationChangelog#8bf37fc9 to nil")
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode addApplicationChangelog#8bf37fc9: field previous_application_version: %w", err)
		}
		a.PreviousApplicationVersion = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (a *AddApplicationChangelogRequest) EncodeTDLibJSON(b tdjson.Encoder) error {
	if a == nil {
		return fmt.Errorf("can't encode addApplicationChangelog#8bf37fc9 as nil")
	}
	b.ObjStart()
	b.PutID("addApplicationChangelog")
	b.Comma()
	b.FieldStart("previous_application_version")
	b.PutString(a.PreviousApplicationVersion)
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (a *AddApplicationChangelogRequest) DecodeTDLibJSON(b tdjson.Decoder) error {
	if a == nil {
		return fmt.Errorf("can't decode addApplicationChangelog#8bf37fc9 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("addApplicationChangelog"); err != nil {
				return fmt.Errorf("unable to decode addApplicationChangelog#8bf37fc9: %w", err)
			}
		case "previous_application_version":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode addApplicationChangelog#8bf37fc9: field previous_application_version: %w", err)
			}
			a.PreviousApplicationVersion = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetPreviousApplicationVersion returns value of PreviousApplicationVersion field.
func (a *AddApplicationChangelogRequest) GetPreviousApplicationVersion() (value string) {
	if a == nil {
		return
	}
	return a.PreviousApplicationVersion
}

// AddApplicationChangelog invokes method addApplicationChangelog#8bf37fc9 returning error if any.
func (c *Client) AddApplicationChangelog(ctx context.Context, previousapplicationversion string) error {
	var ok Ok

	request := &AddApplicationChangelogRequest{
		PreviousApplicationVersion: previousapplicationversion,
	}
	if err := c.rpc.Invoke(ctx, request, &ok); err != nil {
		return err
	}
	return nil
}
