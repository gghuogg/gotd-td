// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// MessageExtendedMediaPreview represents TL type `messageExtendedMediaPreview#7703a347`.
type MessageExtendedMediaPreview struct {
	// Media width; 0 if unknown
	Width int32
	// Media height; 0 if unknown
	Height int32
	// Media duration; 0 if unknown
	Duration int32
	// Media minithumbnail; may be null
	Minithumbnail Minithumbnail
	// Media caption
	Caption FormattedText
}

// MessageExtendedMediaPreviewTypeID is TL type id of MessageExtendedMediaPreview.
const MessageExtendedMediaPreviewTypeID = 0x7703a347

// construct implements constructor of MessageExtendedMediaClass.
func (m MessageExtendedMediaPreview) construct() MessageExtendedMediaClass { return &m }

// Ensuring interfaces in compile-time for MessageExtendedMediaPreview.
var (
	_ bin.Encoder     = &MessageExtendedMediaPreview{}
	_ bin.Decoder     = &MessageExtendedMediaPreview{}
	_ bin.BareEncoder = &MessageExtendedMediaPreview{}
	_ bin.BareDecoder = &MessageExtendedMediaPreview{}

	_ MessageExtendedMediaClass = &MessageExtendedMediaPreview{}
)

func (m *MessageExtendedMediaPreview) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Width == 0) {
		return false
	}
	if !(m.Height == 0) {
		return false
	}
	if !(m.Duration == 0) {
		return false
	}
	if !(m.Minithumbnail.Zero()) {
		return false
	}
	if !(m.Caption.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageExtendedMediaPreview) String() string {
	if m == nil {
		return "MessageExtendedMediaPreview(nil)"
	}
	type Alias MessageExtendedMediaPreview
	return fmt.Sprintf("MessageExtendedMediaPreview%+v", Alias(*m))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessageExtendedMediaPreview) TypeID() uint32 {
	return MessageExtendedMediaPreviewTypeID
}

// TypeName returns name of type in TL schema.
func (*MessageExtendedMediaPreview) TypeName() string {
	return "messageExtendedMediaPreview"
}

// TypeInfo returns info about TL type.
func (m *MessageExtendedMediaPreview) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messageExtendedMediaPreview",
		ID:   MessageExtendedMediaPreviewTypeID,
	}
	if m == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Width",
			SchemaName: "width",
		},
		{
			Name:       "Height",
			SchemaName: "height",
		},
		{
			Name:       "Duration",
			SchemaName: "duration",
		},
		{
			Name:       "Minithumbnail",
			SchemaName: "minithumbnail",
		},
		{
			Name:       "Caption",
			SchemaName: "caption",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (m *MessageExtendedMediaPreview) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageExtendedMediaPreview#7703a347 as nil")
	}
	b.PutID(MessageExtendedMediaPreviewTypeID)
	return m.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (m *MessageExtendedMediaPreview) EncodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageExtendedMediaPreview#7703a347 as nil")
	}
	b.PutInt32(m.Width)
	b.PutInt32(m.Height)
	b.PutInt32(m.Duration)
	if err := m.Minithumbnail.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messageExtendedMediaPreview#7703a347: field minithumbnail: %w", err)
	}
	if err := m.Caption.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messageExtendedMediaPreview#7703a347: field caption: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (m *MessageExtendedMediaPreview) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageExtendedMediaPreview#7703a347 to nil")
	}
	if err := b.ConsumeID(MessageExtendedMediaPreviewTypeID); err != nil {
		return fmt.Errorf("unable to decode messageExtendedMediaPreview#7703a347: %w", err)
	}
	return m.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (m *MessageExtendedMediaPreview) DecodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageExtendedMediaPreview#7703a347 to nil")
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode messageExtendedMediaPreview#7703a347: field width: %w", err)
		}
		m.Width = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode messageExtendedMediaPreview#7703a347: field height: %w", err)
		}
		m.Height = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode messageExtendedMediaPreview#7703a347: field duration: %w", err)
		}
		m.Duration = value
	}
	{
		if err := m.Minithumbnail.Decode(b); err != nil {
			return fmt.Errorf("unable to decode messageExtendedMediaPreview#7703a347: field minithumbnail: %w", err)
		}
	}
	{
		if err := m.Caption.Decode(b); err != nil {
			return fmt.Errorf("unable to decode messageExtendedMediaPreview#7703a347: field caption: %w", err)
		}
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (m *MessageExtendedMediaPreview) EncodeTDLibJSON(b tdjson.Encoder) error {
	if m == nil {
		return fmt.Errorf("can't encode messageExtendedMediaPreview#7703a347 as nil")
	}
	b.ObjStart()
	b.PutID("messageExtendedMediaPreview")
	b.Comma()
	b.FieldStart("width")
	b.PutInt32(m.Width)
	b.Comma()
	b.FieldStart("height")
	b.PutInt32(m.Height)
	b.Comma()
	b.FieldStart("duration")
	b.PutInt32(m.Duration)
	b.Comma()
	b.FieldStart("minithumbnail")
	if err := m.Minithumbnail.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode messageExtendedMediaPreview#7703a347: field minithumbnail: %w", err)
	}
	b.Comma()
	b.FieldStart("caption")
	if err := m.Caption.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode messageExtendedMediaPreview#7703a347: field caption: %w", err)
	}
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (m *MessageExtendedMediaPreview) DecodeTDLibJSON(b tdjson.Decoder) error {
	if m == nil {
		return fmt.Errorf("can't decode messageExtendedMediaPreview#7703a347 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("messageExtendedMediaPreview"); err != nil {
				return fmt.Errorf("unable to decode messageExtendedMediaPreview#7703a347: %w", err)
			}
		case "width":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode messageExtendedMediaPreview#7703a347: field width: %w", err)
			}
			m.Width = value
		case "height":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode messageExtendedMediaPreview#7703a347: field height: %w", err)
			}
			m.Height = value
		case "duration":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode messageExtendedMediaPreview#7703a347: field duration: %w", err)
			}
			m.Duration = value
		case "minithumbnail":
			if err := m.Minithumbnail.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode messageExtendedMediaPreview#7703a347: field minithumbnail: %w", err)
			}
		case "caption":
			if err := m.Caption.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode messageExtendedMediaPreview#7703a347: field caption: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetWidth returns value of Width field.
func (m *MessageExtendedMediaPreview) GetWidth() (value int32) {
	if m == nil {
		return
	}
	return m.Width
}

// GetHeight returns value of Height field.
func (m *MessageExtendedMediaPreview) GetHeight() (value int32) {
	if m == nil {
		return
	}
	return m.Height
}

// GetDuration returns value of Duration field.
func (m *MessageExtendedMediaPreview) GetDuration() (value int32) {
	if m == nil {
		return
	}
	return m.Duration
}

// GetMinithumbnail returns value of Minithumbnail field.
func (m *MessageExtendedMediaPreview) GetMinithumbnail() (value Minithumbnail) {
	if m == nil {
		return
	}
	return m.Minithumbnail
}

// GetCaption returns value of Caption field.
func (m *MessageExtendedMediaPreview) GetCaption() (value FormattedText) {
	if m == nil {
		return
	}
	return m.Caption
}

// MessageExtendedMediaPhoto represents TL type `messageExtendedMediaPhoto#c68b4530`.
type MessageExtendedMediaPhoto struct {
	// The photo
	Photo Photo
	// Photo caption
	Caption FormattedText
}

// MessageExtendedMediaPhotoTypeID is TL type id of MessageExtendedMediaPhoto.
const MessageExtendedMediaPhotoTypeID = 0xc68b4530

// construct implements constructor of MessageExtendedMediaClass.
func (m MessageExtendedMediaPhoto) construct() MessageExtendedMediaClass { return &m }

// Ensuring interfaces in compile-time for MessageExtendedMediaPhoto.
var (
	_ bin.Encoder     = &MessageExtendedMediaPhoto{}
	_ bin.Decoder     = &MessageExtendedMediaPhoto{}
	_ bin.BareEncoder = &MessageExtendedMediaPhoto{}
	_ bin.BareDecoder = &MessageExtendedMediaPhoto{}

	_ MessageExtendedMediaClass = &MessageExtendedMediaPhoto{}
)

func (m *MessageExtendedMediaPhoto) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Photo.Zero()) {
		return false
	}
	if !(m.Caption.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageExtendedMediaPhoto) String() string {
	if m == nil {
		return "MessageExtendedMediaPhoto(nil)"
	}
	type Alias MessageExtendedMediaPhoto
	return fmt.Sprintf("MessageExtendedMediaPhoto%+v", Alias(*m))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessageExtendedMediaPhoto) TypeID() uint32 {
	return MessageExtendedMediaPhotoTypeID
}

// TypeName returns name of type in TL schema.
func (*MessageExtendedMediaPhoto) TypeName() string {
	return "messageExtendedMediaPhoto"
}

// TypeInfo returns info about TL type.
func (m *MessageExtendedMediaPhoto) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messageExtendedMediaPhoto",
		ID:   MessageExtendedMediaPhotoTypeID,
	}
	if m == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Photo",
			SchemaName: "photo",
		},
		{
			Name:       "Caption",
			SchemaName: "caption",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (m *MessageExtendedMediaPhoto) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageExtendedMediaPhoto#c68b4530 as nil")
	}
	b.PutID(MessageExtendedMediaPhotoTypeID)
	return m.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (m *MessageExtendedMediaPhoto) EncodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageExtendedMediaPhoto#c68b4530 as nil")
	}
	if err := m.Photo.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messageExtendedMediaPhoto#c68b4530: field photo: %w", err)
	}
	if err := m.Caption.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messageExtendedMediaPhoto#c68b4530: field caption: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (m *MessageExtendedMediaPhoto) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageExtendedMediaPhoto#c68b4530 to nil")
	}
	if err := b.ConsumeID(MessageExtendedMediaPhotoTypeID); err != nil {
		return fmt.Errorf("unable to decode messageExtendedMediaPhoto#c68b4530: %w", err)
	}
	return m.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (m *MessageExtendedMediaPhoto) DecodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageExtendedMediaPhoto#c68b4530 to nil")
	}
	{
		if err := m.Photo.Decode(b); err != nil {
			return fmt.Errorf("unable to decode messageExtendedMediaPhoto#c68b4530: field photo: %w", err)
		}
	}
	{
		if err := m.Caption.Decode(b); err != nil {
			return fmt.Errorf("unable to decode messageExtendedMediaPhoto#c68b4530: field caption: %w", err)
		}
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (m *MessageExtendedMediaPhoto) EncodeTDLibJSON(b tdjson.Encoder) error {
	if m == nil {
		return fmt.Errorf("can't encode messageExtendedMediaPhoto#c68b4530 as nil")
	}
	b.ObjStart()
	b.PutID("messageExtendedMediaPhoto")
	b.Comma()
	b.FieldStart("photo")
	if err := m.Photo.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode messageExtendedMediaPhoto#c68b4530: field photo: %w", err)
	}
	b.Comma()
	b.FieldStart("caption")
	if err := m.Caption.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode messageExtendedMediaPhoto#c68b4530: field caption: %w", err)
	}
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (m *MessageExtendedMediaPhoto) DecodeTDLibJSON(b tdjson.Decoder) error {
	if m == nil {
		return fmt.Errorf("can't decode messageExtendedMediaPhoto#c68b4530 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("messageExtendedMediaPhoto"); err != nil {
				return fmt.Errorf("unable to decode messageExtendedMediaPhoto#c68b4530: %w", err)
			}
		case "photo":
			if err := m.Photo.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode messageExtendedMediaPhoto#c68b4530: field photo: %w", err)
			}
		case "caption":
			if err := m.Caption.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode messageExtendedMediaPhoto#c68b4530: field caption: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetPhoto returns value of Photo field.
func (m *MessageExtendedMediaPhoto) GetPhoto() (value Photo) {
	if m == nil {
		return
	}
	return m.Photo
}

// GetCaption returns value of Caption field.
func (m *MessageExtendedMediaPhoto) GetCaption() (value FormattedText) {
	if m == nil {
		return
	}
	return m.Caption
}

// MessageExtendedMediaVideo represents TL type `messageExtendedMediaVideo#11acbf3b`.
type MessageExtendedMediaVideo struct {
	// The video
	Video Video
	// Photo caption
	Caption FormattedText
}

// MessageExtendedMediaVideoTypeID is TL type id of MessageExtendedMediaVideo.
const MessageExtendedMediaVideoTypeID = 0x11acbf3b

// construct implements constructor of MessageExtendedMediaClass.
func (m MessageExtendedMediaVideo) construct() MessageExtendedMediaClass { return &m }

// Ensuring interfaces in compile-time for MessageExtendedMediaVideo.
var (
	_ bin.Encoder     = &MessageExtendedMediaVideo{}
	_ bin.Decoder     = &MessageExtendedMediaVideo{}
	_ bin.BareEncoder = &MessageExtendedMediaVideo{}
	_ bin.BareDecoder = &MessageExtendedMediaVideo{}

	_ MessageExtendedMediaClass = &MessageExtendedMediaVideo{}
)

func (m *MessageExtendedMediaVideo) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Video.Zero()) {
		return false
	}
	if !(m.Caption.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageExtendedMediaVideo) String() string {
	if m == nil {
		return "MessageExtendedMediaVideo(nil)"
	}
	type Alias MessageExtendedMediaVideo
	return fmt.Sprintf("MessageExtendedMediaVideo%+v", Alias(*m))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessageExtendedMediaVideo) TypeID() uint32 {
	return MessageExtendedMediaVideoTypeID
}

// TypeName returns name of type in TL schema.
func (*MessageExtendedMediaVideo) TypeName() string {
	return "messageExtendedMediaVideo"
}

// TypeInfo returns info about TL type.
func (m *MessageExtendedMediaVideo) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messageExtendedMediaVideo",
		ID:   MessageExtendedMediaVideoTypeID,
	}
	if m == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Video",
			SchemaName: "video",
		},
		{
			Name:       "Caption",
			SchemaName: "caption",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (m *MessageExtendedMediaVideo) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageExtendedMediaVideo#11acbf3b as nil")
	}
	b.PutID(MessageExtendedMediaVideoTypeID)
	return m.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (m *MessageExtendedMediaVideo) EncodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageExtendedMediaVideo#11acbf3b as nil")
	}
	if err := m.Video.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messageExtendedMediaVideo#11acbf3b: field video: %w", err)
	}
	if err := m.Caption.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messageExtendedMediaVideo#11acbf3b: field caption: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (m *MessageExtendedMediaVideo) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageExtendedMediaVideo#11acbf3b to nil")
	}
	if err := b.ConsumeID(MessageExtendedMediaVideoTypeID); err != nil {
		return fmt.Errorf("unable to decode messageExtendedMediaVideo#11acbf3b: %w", err)
	}
	return m.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (m *MessageExtendedMediaVideo) DecodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageExtendedMediaVideo#11acbf3b to nil")
	}
	{
		if err := m.Video.Decode(b); err != nil {
			return fmt.Errorf("unable to decode messageExtendedMediaVideo#11acbf3b: field video: %w", err)
		}
	}
	{
		if err := m.Caption.Decode(b); err != nil {
			return fmt.Errorf("unable to decode messageExtendedMediaVideo#11acbf3b: field caption: %w", err)
		}
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (m *MessageExtendedMediaVideo) EncodeTDLibJSON(b tdjson.Encoder) error {
	if m == nil {
		return fmt.Errorf("can't encode messageExtendedMediaVideo#11acbf3b as nil")
	}
	b.ObjStart()
	b.PutID("messageExtendedMediaVideo")
	b.Comma()
	b.FieldStart("video")
	if err := m.Video.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode messageExtendedMediaVideo#11acbf3b: field video: %w", err)
	}
	b.Comma()
	b.FieldStart("caption")
	if err := m.Caption.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode messageExtendedMediaVideo#11acbf3b: field caption: %w", err)
	}
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (m *MessageExtendedMediaVideo) DecodeTDLibJSON(b tdjson.Decoder) error {
	if m == nil {
		return fmt.Errorf("can't decode messageExtendedMediaVideo#11acbf3b to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("messageExtendedMediaVideo"); err != nil {
				return fmt.Errorf("unable to decode messageExtendedMediaVideo#11acbf3b: %w", err)
			}
		case "video":
			if err := m.Video.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode messageExtendedMediaVideo#11acbf3b: field video: %w", err)
			}
		case "caption":
			if err := m.Caption.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode messageExtendedMediaVideo#11acbf3b: field caption: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetVideo returns value of Video field.
func (m *MessageExtendedMediaVideo) GetVideo() (value Video) {
	if m == nil {
		return
	}
	return m.Video
}

// GetCaption returns value of Caption field.
func (m *MessageExtendedMediaVideo) GetCaption() (value FormattedText) {
	if m == nil {
		return
	}
	return m.Caption
}

// MessageExtendedMediaUnsupported represents TL type `messageExtendedMediaUnsupported#141f5020`.
type MessageExtendedMediaUnsupported struct {
	// Media caption
	Caption FormattedText
}

// MessageExtendedMediaUnsupportedTypeID is TL type id of MessageExtendedMediaUnsupported.
const MessageExtendedMediaUnsupportedTypeID = 0x141f5020

// construct implements constructor of MessageExtendedMediaClass.
func (m MessageExtendedMediaUnsupported) construct() MessageExtendedMediaClass { return &m }

// Ensuring interfaces in compile-time for MessageExtendedMediaUnsupported.
var (
	_ bin.Encoder     = &MessageExtendedMediaUnsupported{}
	_ bin.Decoder     = &MessageExtendedMediaUnsupported{}
	_ bin.BareEncoder = &MessageExtendedMediaUnsupported{}
	_ bin.BareDecoder = &MessageExtendedMediaUnsupported{}

	_ MessageExtendedMediaClass = &MessageExtendedMediaUnsupported{}
)

func (m *MessageExtendedMediaUnsupported) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Caption.Zero()) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageExtendedMediaUnsupported) String() string {
	if m == nil {
		return "MessageExtendedMediaUnsupported(nil)"
	}
	type Alias MessageExtendedMediaUnsupported
	return fmt.Sprintf("MessageExtendedMediaUnsupported%+v", Alias(*m))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessageExtendedMediaUnsupported) TypeID() uint32 {
	return MessageExtendedMediaUnsupportedTypeID
}

// TypeName returns name of type in TL schema.
func (*MessageExtendedMediaUnsupported) TypeName() string {
	return "messageExtendedMediaUnsupported"
}

// TypeInfo returns info about TL type.
func (m *MessageExtendedMediaUnsupported) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messageExtendedMediaUnsupported",
		ID:   MessageExtendedMediaUnsupportedTypeID,
	}
	if m == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Caption",
			SchemaName: "caption",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (m *MessageExtendedMediaUnsupported) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageExtendedMediaUnsupported#141f5020 as nil")
	}
	b.PutID(MessageExtendedMediaUnsupportedTypeID)
	return m.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (m *MessageExtendedMediaUnsupported) EncodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageExtendedMediaUnsupported#141f5020 as nil")
	}
	if err := m.Caption.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messageExtendedMediaUnsupported#141f5020: field caption: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (m *MessageExtendedMediaUnsupported) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageExtendedMediaUnsupported#141f5020 to nil")
	}
	if err := b.ConsumeID(MessageExtendedMediaUnsupportedTypeID); err != nil {
		return fmt.Errorf("unable to decode messageExtendedMediaUnsupported#141f5020: %w", err)
	}
	return m.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (m *MessageExtendedMediaUnsupported) DecodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageExtendedMediaUnsupported#141f5020 to nil")
	}
	{
		if err := m.Caption.Decode(b); err != nil {
			return fmt.Errorf("unable to decode messageExtendedMediaUnsupported#141f5020: field caption: %w", err)
		}
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (m *MessageExtendedMediaUnsupported) EncodeTDLibJSON(b tdjson.Encoder) error {
	if m == nil {
		return fmt.Errorf("can't encode messageExtendedMediaUnsupported#141f5020 as nil")
	}
	b.ObjStart()
	b.PutID("messageExtendedMediaUnsupported")
	b.Comma()
	b.FieldStart("caption")
	if err := m.Caption.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode messageExtendedMediaUnsupported#141f5020: field caption: %w", err)
	}
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (m *MessageExtendedMediaUnsupported) DecodeTDLibJSON(b tdjson.Decoder) error {
	if m == nil {
		return fmt.Errorf("can't decode messageExtendedMediaUnsupported#141f5020 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("messageExtendedMediaUnsupported"); err != nil {
				return fmt.Errorf("unable to decode messageExtendedMediaUnsupported#141f5020: %w", err)
			}
		case "caption":
			if err := m.Caption.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode messageExtendedMediaUnsupported#141f5020: field caption: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetCaption returns value of Caption field.
func (m *MessageExtendedMediaUnsupported) GetCaption() (value FormattedText) {
	if m == nil {
		return
	}
	return m.Caption
}

// MessageExtendedMediaClassName is schema name of MessageExtendedMediaClass.
const MessageExtendedMediaClassName = "MessageExtendedMedia"

// MessageExtendedMediaClass represents MessageExtendedMedia generic type.
//
// Example:
//
//	g, err := tdapi.DecodeMessageExtendedMedia(buf)
//	if err != nil {
//	    panic(err)
//	}
//	switch v := g.(type) {
//	case *tdapi.MessageExtendedMediaPreview: // messageExtendedMediaPreview#7703a347
//	case *tdapi.MessageExtendedMediaPhoto: // messageExtendedMediaPhoto#c68b4530
//	case *tdapi.MessageExtendedMediaVideo: // messageExtendedMediaVideo#11acbf3b
//	case *tdapi.MessageExtendedMediaUnsupported: // messageExtendedMediaUnsupported#141f5020
//	default: panic(v)
//	}
type MessageExtendedMediaClass interface {
	bin.Encoder
	bin.Decoder
	bin.BareEncoder
	bin.BareDecoder
	construct() MessageExtendedMediaClass

	// TypeID returns type id in TL schema.
	//
	// See https://core.telegram.org/mtproto/TL-tl#remarks.
	TypeID() uint32
	// TypeName returns name of type in TL schema.
	TypeName() string
	// String implements fmt.Stringer.
	String() string
	// Zero returns true if current object has a zero value.
	Zero() bool

	EncodeTDLibJSON(b tdjson.Encoder) error
	DecodeTDLibJSON(b tdjson.Decoder) error

	// Media caption
	GetCaption() (value FormattedText)
}

// DecodeMessageExtendedMedia implements binary de-serialization for MessageExtendedMediaClass.
func DecodeMessageExtendedMedia(buf *bin.Buffer) (MessageExtendedMediaClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case MessageExtendedMediaPreviewTypeID:
		// Decoding messageExtendedMediaPreview#7703a347.
		v := MessageExtendedMediaPreview{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageExtendedMediaClass: %w", err)
		}
		return &v, nil
	case MessageExtendedMediaPhotoTypeID:
		// Decoding messageExtendedMediaPhoto#c68b4530.
		v := MessageExtendedMediaPhoto{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageExtendedMediaClass: %w", err)
		}
		return &v, nil
	case MessageExtendedMediaVideoTypeID:
		// Decoding messageExtendedMediaVideo#11acbf3b.
		v := MessageExtendedMediaVideo{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageExtendedMediaClass: %w", err)
		}
		return &v, nil
	case MessageExtendedMediaUnsupportedTypeID:
		// Decoding messageExtendedMediaUnsupported#141f5020.
		v := MessageExtendedMediaUnsupported{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageExtendedMediaClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode MessageExtendedMediaClass: %w", bin.NewUnexpectedID(id))
	}
}

// DecodeTDLibJSONMessageExtendedMedia implements binary de-serialization for MessageExtendedMediaClass.
func DecodeTDLibJSONMessageExtendedMedia(buf tdjson.Decoder) (MessageExtendedMediaClass, error) {
	id, err := buf.FindTypeID()
	if err != nil {
		return nil, err
	}
	switch id {
	case "messageExtendedMediaPreview":
		// Decoding messageExtendedMediaPreview#7703a347.
		v := MessageExtendedMediaPreview{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageExtendedMediaClass: %w", err)
		}
		return &v, nil
	case "messageExtendedMediaPhoto":
		// Decoding messageExtendedMediaPhoto#c68b4530.
		v := MessageExtendedMediaPhoto{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageExtendedMediaClass: %w", err)
		}
		return &v, nil
	case "messageExtendedMediaVideo":
		// Decoding messageExtendedMediaVideo#11acbf3b.
		v := MessageExtendedMediaVideo{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageExtendedMediaClass: %w", err)
		}
		return &v, nil
	case "messageExtendedMediaUnsupported":
		// Decoding messageExtendedMediaUnsupported#141f5020.
		v := MessageExtendedMediaUnsupported{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageExtendedMediaClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode MessageExtendedMediaClass: %w", tdjson.NewUnexpectedID(id))
	}
}

// MessageExtendedMedia boxes the MessageExtendedMediaClass providing a helper.
type MessageExtendedMediaBox struct {
	MessageExtendedMedia MessageExtendedMediaClass
}

// Decode implements bin.Decoder for MessageExtendedMediaBox.
func (b *MessageExtendedMediaBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode MessageExtendedMediaBox to nil")
	}
	v, err := DecodeMessageExtendedMedia(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.MessageExtendedMedia = v
	return nil
}

// Encode implements bin.Encode for MessageExtendedMediaBox.
func (b *MessageExtendedMediaBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.MessageExtendedMedia == nil {
		return fmt.Errorf("unable to encode MessageExtendedMediaClass as nil")
	}
	return b.MessageExtendedMedia.Encode(buf)
}

// DecodeTDLibJSON implements bin.Decoder for MessageExtendedMediaBox.
func (b *MessageExtendedMediaBox) DecodeTDLibJSON(buf tdjson.Decoder) error {
	if b == nil {
		return fmt.Errorf("unable to decode MessageExtendedMediaBox to nil")
	}
	v, err := DecodeTDLibJSONMessageExtendedMedia(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.MessageExtendedMedia = v
	return nil
}

// EncodeTDLibJSON implements bin.Encode for MessageExtendedMediaBox.
func (b *MessageExtendedMediaBox) EncodeTDLibJSON(buf tdjson.Encoder) error {
	if b == nil || b.MessageExtendedMedia == nil {
		return fmt.Errorf("unable to encode MessageExtendedMediaClass as nil")
	}
	return b.MessageExtendedMedia.EncodeTDLibJSON(buf)
}
