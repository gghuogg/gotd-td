// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// MessageForwardInfo represents TL type `messageForwardInfo#ec7dcac8`.
type MessageForwardInfo struct {
	// Origin of a forwarded message
	Origin MessageForwardOriginClass
	// Point in time (Unix timestamp) when the message was originally sent
	Date int32
	// The type of a public service announcement for the forwarded message
	PublicServiceAnnouncementType string
	// For messages forwarded to the chat with the current user (Saved Messages), to the
	// Replies bot chat, or to the channel's discussion group, the identifier of the chat
	// from which the message was forwarded last time; 0 if unknown
	FromChatID int64
	// For messages forwarded to the chat with the current user (Saved Messages), to the
	// Replies bot chat, or to the channel's discussion group, the identifier of the original
	// message from which the new message was forwarded last time; 0 if unknown
	FromMessageID int64
}

// MessageForwardInfoTypeID is TL type id of MessageForwardInfo.
const MessageForwardInfoTypeID = 0xec7dcac8

// Ensuring interfaces in compile-time for MessageForwardInfo.
var (
	_ bin.Encoder     = &MessageForwardInfo{}
	_ bin.Decoder     = &MessageForwardInfo{}
	_ bin.BareEncoder = &MessageForwardInfo{}
	_ bin.BareDecoder = &MessageForwardInfo{}
)

func (m *MessageForwardInfo) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Origin == nil) {
		return false
	}
	if !(m.Date == 0) {
		return false
	}
	if !(m.PublicServiceAnnouncementType == "") {
		return false
	}
	if !(m.FromChatID == 0) {
		return false
	}
	if !(m.FromMessageID == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageForwardInfo) String() string {
	if m == nil {
		return "MessageForwardInfo(nil)"
	}
	type Alias MessageForwardInfo
	return fmt.Sprintf("MessageForwardInfo%+v", Alias(*m))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessageForwardInfo) TypeID() uint32 {
	return MessageForwardInfoTypeID
}

// TypeName returns name of type in TL schema.
func (*MessageForwardInfo) TypeName() string {
	return "messageForwardInfo"
}

// TypeInfo returns info about TL type.
func (m *MessageForwardInfo) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messageForwardInfo",
		ID:   MessageForwardInfoTypeID,
	}
	if m == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Origin",
			SchemaName: "origin",
		},
		{
			Name:       "Date",
			SchemaName: "date",
		},
		{
			Name:       "PublicServiceAnnouncementType",
			SchemaName: "public_service_announcement_type",
		},
		{
			Name:       "FromChatID",
			SchemaName: "from_chat_id",
		},
		{
			Name:       "FromMessageID",
			SchemaName: "from_message_id",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (m *MessageForwardInfo) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageForwardInfo#ec7dcac8 as nil")
	}
	b.PutID(MessageForwardInfoTypeID)
	return m.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (m *MessageForwardInfo) EncodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageForwardInfo#ec7dcac8 as nil")
	}
	if m.Origin == nil {
		return fmt.Errorf("unable to encode messageForwardInfo#ec7dcac8: field origin is nil")
	}
	if err := m.Origin.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messageForwardInfo#ec7dcac8: field origin: %w", err)
	}
	b.PutInt32(m.Date)
	b.PutString(m.PublicServiceAnnouncementType)
	b.PutInt53(m.FromChatID)
	b.PutInt53(m.FromMessageID)
	return nil
}

// Decode implements bin.Decoder.
func (m *MessageForwardInfo) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageForwardInfo#ec7dcac8 to nil")
	}
	if err := b.ConsumeID(MessageForwardInfoTypeID); err != nil {
		return fmt.Errorf("unable to decode messageForwardInfo#ec7dcac8: %w", err)
	}
	return m.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (m *MessageForwardInfo) DecodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageForwardInfo#ec7dcac8 to nil")
	}
	{
		value, err := DecodeMessageForwardOrigin(b)
		if err != nil {
			return fmt.Errorf("unable to decode messageForwardInfo#ec7dcac8: field origin: %w", err)
		}
		m.Origin = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode messageForwardInfo#ec7dcac8: field date: %w", err)
		}
		m.Date = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode messageForwardInfo#ec7dcac8: field public_service_announcement_type: %w", err)
		}
		m.PublicServiceAnnouncementType = value
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode messageForwardInfo#ec7dcac8: field from_chat_id: %w", err)
		}
		m.FromChatID = value
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode messageForwardInfo#ec7dcac8: field from_message_id: %w", err)
		}
		m.FromMessageID = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (m *MessageForwardInfo) EncodeTDLibJSON(b tdjson.Encoder) error {
	if m == nil {
		return fmt.Errorf("can't encode messageForwardInfo#ec7dcac8 as nil")
	}
	b.ObjStart()
	b.PutID("messageForwardInfo")
	b.Comma()
	b.FieldStart("origin")
	if m.Origin == nil {
		return fmt.Errorf("unable to encode messageForwardInfo#ec7dcac8: field origin is nil")
	}
	if err := m.Origin.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode messageForwardInfo#ec7dcac8: field origin: %w", err)
	}
	b.Comma()
	b.FieldStart("date")
	b.PutInt32(m.Date)
	b.Comma()
	b.FieldStart("public_service_announcement_type")
	b.PutString(m.PublicServiceAnnouncementType)
	b.Comma()
	b.FieldStart("from_chat_id")
	b.PutInt53(m.FromChatID)
	b.Comma()
	b.FieldStart("from_message_id")
	b.PutInt53(m.FromMessageID)
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (m *MessageForwardInfo) DecodeTDLibJSON(b tdjson.Decoder) error {
	if m == nil {
		return fmt.Errorf("can't decode messageForwardInfo#ec7dcac8 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("messageForwardInfo"); err != nil {
				return fmt.Errorf("unable to decode messageForwardInfo#ec7dcac8: %w", err)
			}
		case "origin":
			value, err := DecodeTDLibJSONMessageForwardOrigin(b)
			if err != nil {
				return fmt.Errorf("unable to decode messageForwardInfo#ec7dcac8: field origin: %w", err)
			}
			m.Origin = value
		case "date":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode messageForwardInfo#ec7dcac8: field date: %w", err)
			}
			m.Date = value
		case "public_service_announcement_type":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode messageForwardInfo#ec7dcac8: field public_service_announcement_type: %w", err)
			}
			m.PublicServiceAnnouncementType = value
		case "from_chat_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode messageForwardInfo#ec7dcac8: field from_chat_id: %w", err)
			}
			m.FromChatID = value
		case "from_message_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode messageForwardInfo#ec7dcac8: field from_message_id: %w", err)
			}
			m.FromMessageID = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetOrigin returns value of Origin field.
func (m *MessageForwardInfo) GetOrigin() (value MessageForwardOriginClass) {
	if m == nil {
		return
	}
	return m.Origin
}

// GetDate returns value of Date field.
func (m *MessageForwardInfo) GetDate() (value int32) {
	if m == nil {
		return
	}
	return m.Date
}

// GetPublicServiceAnnouncementType returns value of PublicServiceAnnouncementType field.
func (m *MessageForwardInfo) GetPublicServiceAnnouncementType() (value string) {
	if m == nil {
		return
	}
	return m.PublicServiceAnnouncementType
}

// GetFromChatID returns value of FromChatID field.
func (m *MessageForwardInfo) GetFromChatID() (value int64) {
	if m == nil {
		return
	}
	return m.FromChatID
}

// GetFromMessageID returns value of FromMessageID field.
func (m *MessageForwardInfo) GetFromMessageID() (value int64) {
	if m == nil {
		return
	}
	return m.FromMessageID
}
