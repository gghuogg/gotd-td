// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// StorePaymentPurposePremiumSubscription represents TL type `storePaymentPurposePremiumSubscription#4b558114`.
type StorePaymentPurposePremiumSubscription struct {
	// Pass true if this is a restore of a Telegram Premium purchase; only for App Store
	IsRestore bool
	// Pass true if this is an upgrade from a monthly subscription to early subscription;
	// only for App Store
	IsUpgrade bool
}

// StorePaymentPurposePremiumSubscriptionTypeID is TL type id of StorePaymentPurposePremiumSubscription.
const StorePaymentPurposePremiumSubscriptionTypeID = 0x4b558114

// construct implements constructor of StorePaymentPurposeClass.
func (s StorePaymentPurposePremiumSubscription) construct() StorePaymentPurposeClass { return &s }

// Ensuring interfaces in compile-time for StorePaymentPurposePremiumSubscription.
var (
	_ bin.Encoder     = &StorePaymentPurposePremiumSubscription{}
	_ bin.Decoder     = &StorePaymentPurposePremiumSubscription{}
	_ bin.BareEncoder = &StorePaymentPurposePremiumSubscription{}
	_ bin.BareDecoder = &StorePaymentPurposePremiumSubscription{}

	_ StorePaymentPurposeClass = &StorePaymentPurposePremiumSubscription{}
)

func (s *StorePaymentPurposePremiumSubscription) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.IsRestore == false) {
		return false
	}
	if !(s.IsUpgrade == false) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *StorePaymentPurposePremiumSubscription) String() string {
	if s == nil {
		return "StorePaymentPurposePremiumSubscription(nil)"
	}
	type Alias StorePaymentPurposePremiumSubscription
	return fmt.Sprintf("StorePaymentPurposePremiumSubscription%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StorePaymentPurposePremiumSubscription) TypeID() uint32 {
	return StorePaymentPurposePremiumSubscriptionTypeID
}

// TypeName returns name of type in TL schema.
func (*StorePaymentPurposePremiumSubscription) TypeName() string {
	return "storePaymentPurposePremiumSubscription"
}

// TypeInfo returns info about TL type.
func (s *StorePaymentPurposePremiumSubscription) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "storePaymentPurposePremiumSubscription",
		ID:   StorePaymentPurposePremiumSubscriptionTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "IsRestore",
			SchemaName: "is_restore",
		},
		{
			Name:       "IsUpgrade",
			SchemaName: "is_upgrade",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (s *StorePaymentPurposePremiumSubscription) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode storePaymentPurposePremiumSubscription#4b558114 as nil")
	}
	b.PutID(StorePaymentPurposePremiumSubscriptionTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *StorePaymentPurposePremiumSubscription) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode storePaymentPurposePremiumSubscription#4b558114 as nil")
	}
	b.PutBool(s.IsRestore)
	b.PutBool(s.IsUpgrade)
	return nil
}

// Decode implements bin.Decoder.
func (s *StorePaymentPurposePremiumSubscription) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode storePaymentPurposePremiumSubscription#4b558114 to nil")
	}
	if err := b.ConsumeID(StorePaymentPurposePremiumSubscriptionTypeID); err != nil {
		return fmt.Errorf("unable to decode storePaymentPurposePremiumSubscription#4b558114: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *StorePaymentPurposePremiumSubscription) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode storePaymentPurposePremiumSubscription#4b558114 to nil")
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode storePaymentPurposePremiumSubscription#4b558114: field is_restore: %w", err)
		}
		s.IsRestore = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode storePaymentPurposePremiumSubscription#4b558114: field is_upgrade: %w", err)
		}
		s.IsUpgrade = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (s *StorePaymentPurposePremiumSubscription) EncodeTDLibJSON(b tdjson.Encoder) error {
	if s == nil {
		return fmt.Errorf("can't encode storePaymentPurposePremiumSubscription#4b558114 as nil")
	}
	b.ObjStart()
	b.PutID("storePaymentPurposePremiumSubscription")
	b.Comma()
	b.FieldStart("is_restore")
	b.PutBool(s.IsRestore)
	b.Comma()
	b.FieldStart("is_upgrade")
	b.PutBool(s.IsUpgrade)
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (s *StorePaymentPurposePremiumSubscription) DecodeTDLibJSON(b tdjson.Decoder) error {
	if s == nil {
		return fmt.Errorf("can't decode storePaymentPurposePremiumSubscription#4b558114 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("storePaymentPurposePremiumSubscription"); err != nil {
				return fmt.Errorf("unable to decode storePaymentPurposePremiumSubscription#4b558114: %w", err)
			}
		case "is_restore":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode storePaymentPurposePremiumSubscription#4b558114: field is_restore: %w", err)
			}
			s.IsRestore = value
		case "is_upgrade":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode storePaymentPurposePremiumSubscription#4b558114: field is_upgrade: %w", err)
			}
			s.IsUpgrade = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetIsRestore returns value of IsRestore field.
func (s *StorePaymentPurposePremiumSubscription) GetIsRestore() (value bool) {
	if s == nil {
		return
	}
	return s.IsRestore
}

// GetIsUpgrade returns value of IsUpgrade field.
func (s *StorePaymentPurposePremiumSubscription) GetIsUpgrade() (value bool) {
	if s == nil {
		return
	}
	return s.IsUpgrade
}

// StorePaymentPurposeGiftedPremium represents TL type `storePaymentPurposeGiftedPremium#7240c0d1`.
type StorePaymentPurposeGiftedPremium struct {
	// Identifier of the user for which Premium was gifted
	UserID int64
	// ISO 4217 currency code of the payment currency
	Currency string
	// Paid amount, in the smallest units of the currency
	Amount int64
}

// StorePaymentPurposeGiftedPremiumTypeID is TL type id of StorePaymentPurposeGiftedPremium.
const StorePaymentPurposeGiftedPremiumTypeID = 0x7240c0d1

// construct implements constructor of StorePaymentPurposeClass.
func (s StorePaymentPurposeGiftedPremium) construct() StorePaymentPurposeClass { return &s }

// Ensuring interfaces in compile-time for StorePaymentPurposeGiftedPremium.
var (
	_ bin.Encoder     = &StorePaymentPurposeGiftedPremium{}
	_ bin.Decoder     = &StorePaymentPurposeGiftedPremium{}
	_ bin.BareEncoder = &StorePaymentPurposeGiftedPremium{}
	_ bin.BareDecoder = &StorePaymentPurposeGiftedPremium{}

	_ StorePaymentPurposeClass = &StorePaymentPurposeGiftedPremium{}
)

func (s *StorePaymentPurposeGiftedPremium) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.UserID == 0) {
		return false
	}
	if !(s.Currency == "") {
		return false
	}
	if !(s.Amount == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *StorePaymentPurposeGiftedPremium) String() string {
	if s == nil {
		return "StorePaymentPurposeGiftedPremium(nil)"
	}
	type Alias StorePaymentPurposeGiftedPremium
	return fmt.Sprintf("StorePaymentPurposeGiftedPremium%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StorePaymentPurposeGiftedPremium) TypeID() uint32 {
	return StorePaymentPurposeGiftedPremiumTypeID
}

// TypeName returns name of type in TL schema.
func (*StorePaymentPurposeGiftedPremium) TypeName() string {
	return "storePaymentPurposeGiftedPremium"
}

// TypeInfo returns info about TL type.
func (s *StorePaymentPurposeGiftedPremium) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "storePaymentPurposeGiftedPremium",
		ID:   StorePaymentPurposeGiftedPremiumTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "UserID",
			SchemaName: "user_id",
		},
		{
			Name:       "Currency",
			SchemaName: "currency",
		},
		{
			Name:       "Amount",
			SchemaName: "amount",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (s *StorePaymentPurposeGiftedPremium) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode storePaymentPurposeGiftedPremium#7240c0d1 as nil")
	}
	b.PutID(StorePaymentPurposeGiftedPremiumTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *StorePaymentPurposeGiftedPremium) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode storePaymentPurposeGiftedPremium#7240c0d1 as nil")
	}
	b.PutInt53(s.UserID)
	b.PutString(s.Currency)
	b.PutInt53(s.Amount)
	return nil
}

// Decode implements bin.Decoder.
func (s *StorePaymentPurposeGiftedPremium) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode storePaymentPurposeGiftedPremium#7240c0d1 to nil")
	}
	if err := b.ConsumeID(StorePaymentPurposeGiftedPremiumTypeID); err != nil {
		return fmt.Errorf("unable to decode storePaymentPurposeGiftedPremium#7240c0d1: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *StorePaymentPurposeGiftedPremium) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode storePaymentPurposeGiftedPremium#7240c0d1 to nil")
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode storePaymentPurposeGiftedPremium#7240c0d1: field user_id: %w", err)
		}
		s.UserID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode storePaymentPurposeGiftedPremium#7240c0d1: field currency: %w", err)
		}
		s.Currency = value
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode storePaymentPurposeGiftedPremium#7240c0d1: field amount: %w", err)
		}
		s.Amount = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (s *StorePaymentPurposeGiftedPremium) EncodeTDLibJSON(b tdjson.Encoder) error {
	if s == nil {
		return fmt.Errorf("can't encode storePaymentPurposeGiftedPremium#7240c0d1 as nil")
	}
	b.ObjStart()
	b.PutID("storePaymentPurposeGiftedPremium")
	b.Comma()
	b.FieldStart("user_id")
	b.PutInt53(s.UserID)
	b.Comma()
	b.FieldStart("currency")
	b.PutString(s.Currency)
	b.Comma()
	b.FieldStart("amount")
	b.PutInt53(s.Amount)
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (s *StorePaymentPurposeGiftedPremium) DecodeTDLibJSON(b tdjson.Decoder) error {
	if s == nil {
		return fmt.Errorf("can't decode storePaymentPurposeGiftedPremium#7240c0d1 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("storePaymentPurposeGiftedPremium"); err != nil {
				return fmt.Errorf("unable to decode storePaymentPurposeGiftedPremium#7240c0d1: %w", err)
			}
		case "user_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode storePaymentPurposeGiftedPremium#7240c0d1: field user_id: %w", err)
			}
			s.UserID = value
		case "currency":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode storePaymentPurposeGiftedPremium#7240c0d1: field currency: %w", err)
			}
			s.Currency = value
		case "amount":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode storePaymentPurposeGiftedPremium#7240c0d1: field amount: %w", err)
			}
			s.Amount = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetUserID returns value of UserID field.
func (s *StorePaymentPurposeGiftedPremium) GetUserID() (value int64) {
	if s == nil {
		return
	}
	return s.UserID
}

// GetCurrency returns value of Currency field.
func (s *StorePaymentPurposeGiftedPremium) GetCurrency() (value string) {
	if s == nil {
		return
	}
	return s.Currency
}

// GetAmount returns value of Amount field.
func (s *StorePaymentPurposeGiftedPremium) GetAmount() (value int64) {
	if s == nil {
		return
	}
	return s.Amount
}

// StorePaymentPurposeClassName is schema name of StorePaymentPurposeClass.
const StorePaymentPurposeClassName = "StorePaymentPurpose"

// StorePaymentPurposeClass represents StorePaymentPurpose generic type.
//
// Example:
//
//	g, err := tdapi.DecodeStorePaymentPurpose(buf)
//	if err != nil {
//	    panic(err)
//	}
//	switch v := g.(type) {
//	case *tdapi.StorePaymentPurposePremiumSubscription: // storePaymentPurposePremiumSubscription#4b558114
//	case *tdapi.StorePaymentPurposeGiftedPremium: // storePaymentPurposeGiftedPremium#7240c0d1
//	default: panic(v)
//	}
type StorePaymentPurposeClass interface {
	bin.Encoder
	bin.Decoder
	bin.BareEncoder
	bin.BareDecoder
	construct() StorePaymentPurposeClass

	// TypeID returns type id in TL schema.
	//
	// See https://core.telegram.org/mtproto/TL-tl#remarks.
	TypeID() uint32
	// TypeName returns name of type in TL schema.
	TypeName() string
	// String implements fmt.Stringer.
	String() string
	// Zero returns true if current object has a zero value.
	Zero() bool

	EncodeTDLibJSON(b tdjson.Encoder) error
	DecodeTDLibJSON(b tdjson.Decoder) error
}

// DecodeStorePaymentPurpose implements binary de-serialization for StorePaymentPurposeClass.
func DecodeStorePaymentPurpose(buf *bin.Buffer) (StorePaymentPurposeClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case StorePaymentPurposePremiumSubscriptionTypeID:
		// Decoding storePaymentPurposePremiumSubscription#4b558114.
		v := StorePaymentPurposePremiumSubscription{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StorePaymentPurposeClass: %w", err)
		}
		return &v, nil
	case StorePaymentPurposeGiftedPremiumTypeID:
		// Decoding storePaymentPurposeGiftedPremium#7240c0d1.
		v := StorePaymentPurposeGiftedPremium{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StorePaymentPurposeClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode StorePaymentPurposeClass: %w", bin.NewUnexpectedID(id))
	}
}

// DecodeTDLibJSONStorePaymentPurpose implements binary de-serialization for StorePaymentPurposeClass.
func DecodeTDLibJSONStorePaymentPurpose(buf tdjson.Decoder) (StorePaymentPurposeClass, error) {
	id, err := buf.FindTypeID()
	if err != nil {
		return nil, err
	}
	switch id {
	case "storePaymentPurposePremiumSubscription":
		// Decoding storePaymentPurposePremiumSubscription#4b558114.
		v := StorePaymentPurposePremiumSubscription{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StorePaymentPurposeClass: %w", err)
		}
		return &v, nil
	case "storePaymentPurposeGiftedPremium":
		// Decoding storePaymentPurposeGiftedPremium#7240c0d1.
		v := StorePaymentPurposeGiftedPremium{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode StorePaymentPurposeClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode StorePaymentPurposeClass: %w", tdjson.NewUnexpectedID(id))
	}
}

// StorePaymentPurpose boxes the StorePaymentPurposeClass providing a helper.
type StorePaymentPurposeBox struct {
	StorePaymentPurpose StorePaymentPurposeClass
}

// Decode implements bin.Decoder for StorePaymentPurposeBox.
func (b *StorePaymentPurposeBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode StorePaymentPurposeBox to nil")
	}
	v, err := DecodeStorePaymentPurpose(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.StorePaymentPurpose = v
	return nil
}

// Encode implements bin.Encode for StorePaymentPurposeBox.
func (b *StorePaymentPurposeBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.StorePaymentPurpose == nil {
		return fmt.Errorf("unable to encode StorePaymentPurposeClass as nil")
	}
	return b.StorePaymentPurpose.Encode(buf)
}

// DecodeTDLibJSON implements bin.Decoder for StorePaymentPurposeBox.
func (b *StorePaymentPurposeBox) DecodeTDLibJSON(buf tdjson.Decoder) error {
	if b == nil {
		return fmt.Errorf("unable to decode StorePaymentPurposeBox to nil")
	}
	v, err := DecodeTDLibJSONStorePaymentPurpose(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.StorePaymentPurpose = v
	return nil
}

// EncodeTDLibJSON implements bin.Encode for StorePaymentPurposeBox.
func (b *StorePaymentPurposeBox) EncodeTDLibJSON(buf tdjson.Encoder) error {
	if b == nil || b.StorePaymentPurpose == nil {
		return fmt.Errorf("unable to encode StorePaymentPurposeClass as nil")
	}
	return b.StorePaymentPurpose.EncodeTDLibJSON(buf)
}
