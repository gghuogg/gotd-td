// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// EmojiCategory represents TL type `emojiCategory#c6e9e5a4`.
type EmojiCategory struct {
	// Name of the category
	Name string
	// Custom emoji sticker, which represents icon of the category
	Icon Sticker
	// List of emojis in the category
	Emojis []string
}

// EmojiCategoryTypeID is TL type id of EmojiCategory.
const EmojiCategoryTypeID = 0xc6e9e5a4

// Ensuring interfaces in compile-time for EmojiCategory.
var (
	_ bin.Encoder     = &EmojiCategory{}
	_ bin.Decoder     = &EmojiCategory{}
	_ bin.BareEncoder = &EmojiCategory{}
	_ bin.BareDecoder = &EmojiCategory{}
)

func (e *EmojiCategory) Zero() bool {
	if e == nil {
		return true
	}
	if !(e.Name == "") {
		return false
	}
	if !(e.Icon.Zero()) {
		return false
	}
	if !(e.Emojis == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (e *EmojiCategory) String() string {
	if e == nil {
		return "EmojiCategory(nil)"
	}
	type Alias EmojiCategory
	return fmt.Sprintf("EmojiCategory%+v", Alias(*e))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*EmojiCategory) TypeID() uint32 {
	return EmojiCategoryTypeID
}

// TypeName returns name of type in TL schema.
func (*EmojiCategory) TypeName() string {
	return "emojiCategory"
}

// TypeInfo returns info about TL type.
func (e *EmojiCategory) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "emojiCategory",
		ID:   EmojiCategoryTypeID,
	}
	if e == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Name",
			SchemaName: "name",
		},
		{
			Name:       "Icon",
			SchemaName: "icon",
		},
		{
			Name:       "Emojis",
			SchemaName: "emojis",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (e *EmojiCategory) Encode(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't encode emojiCategory#c6e9e5a4 as nil")
	}
	b.PutID(EmojiCategoryTypeID)
	return e.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (e *EmojiCategory) EncodeBare(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't encode emojiCategory#c6e9e5a4 as nil")
	}
	b.PutString(e.Name)
	if err := e.Icon.Encode(b); err != nil {
		return fmt.Errorf("unable to encode emojiCategory#c6e9e5a4: field icon: %w", err)
	}
	b.PutInt(len(e.Emojis))
	for _, v := range e.Emojis {
		b.PutString(v)
	}
	return nil
}

// Decode implements bin.Decoder.
func (e *EmojiCategory) Decode(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't decode emojiCategory#c6e9e5a4 to nil")
	}
	if err := b.ConsumeID(EmojiCategoryTypeID); err != nil {
		return fmt.Errorf("unable to decode emojiCategory#c6e9e5a4: %w", err)
	}
	return e.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (e *EmojiCategory) DecodeBare(b *bin.Buffer) error {
	if e == nil {
		return fmt.Errorf("can't decode emojiCategory#c6e9e5a4 to nil")
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode emojiCategory#c6e9e5a4: field name: %w", err)
		}
		e.Name = value
	}
	{
		if err := e.Icon.Decode(b); err != nil {
			return fmt.Errorf("unable to decode emojiCategory#c6e9e5a4: field icon: %w", err)
		}
	}
	{
		headerLen, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode emojiCategory#c6e9e5a4: field emojis: %w", err)
		}

		if headerLen > 0 {
			e.Emojis = make([]string, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode emojiCategory#c6e9e5a4: field emojis: %w", err)
			}
			e.Emojis = append(e.Emojis, value)
		}
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (e *EmojiCategory) EncodeTDLibJSON(b tdjson.Encoder) error {
	if e == nil {
		return fmt.Errorf("can't encode emojiCategory#c6e9e5a4 as nil")
	}
	b.ObjStart()
	b.PutID("emojiCategory")
	b.Comma()
	b.FieldStart("name")
	b.PutString(e.Name)
	b.Comma()
	b.FieldStart("icon")
	if err := e.Icon.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode emojiCategory#c6e9e5a4: field icon: %w", err)
	}
	b.Comma()
	b.FieldStart("emojis")
	b.ArrStart()
	for _, v := range e.Emojis {
		b.PutString(v)
		b.Comma()
	}
	b.StripComma()
	b.ArrEnd()
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (e *EmojiCategory) DecodeTDLibJSON(b tdjson.Decoder) error {
	if e == nil {
		return fmt.Errorf("can't decode emojiCategory#c6e9e5a4 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("emojiCategory"); err != nil {
				return fmt.Errorf("unable to decode emojiCategory#c6e9e5a4: %w", err)
			}
		case "name":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode emojiCategory#c6e9e5a4: field name: %w", err)
			}
			e.Name = value
		case "icon":
			if err := e.Icon.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode emojiCategory#c6e9e5a4: field icon: %w", err)
			}
		case "emojis":
			if err := b.Arr(func(b tdjson.Decoder) error {
				value, err := b.String()
				if err != nil {
					return fmt.Errorf("unable to decode emojiCategory#c6e9e5a4: field emojis: %w", err)
				}
				e.Emojis = append(e.Emojis, value)
				return nil
			}); err != nil {
				return fmt.Errorf("unable to decode emojiCategory#c6e9e5a4: field emojis: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetName returns value of Name field.
func (e *EmojiCategory) GetName() (value string) {
	if e == nil {
		return
	}
	return e.Name
}

// GetIcon returns value of Icon field.
func (e *EmojiCategory) GetIcon() (value Sticker) {
	if e == nil {
		return
	}
	return e.Icon
}

// GetEmojis returns value of Emojis field.
func (e *EmojiCategory) GetEmojis() (value []string) {
	if e == nil {
		return
	}
	return e.Emojis
}
