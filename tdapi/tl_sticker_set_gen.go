// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// StickerSet represents TL type `stickerSet#2e5aef95`.
type StickerSet struct {
	// Identifier of the sticker set
	ID int64
	// Title of the sticker set
	Title string
	// Name of the sticker set
	Name string
	// Sticker set thumbnail in WEBP, TGS, or WEBM format with width and height 100; may be
	// null. The file can be downloaded only before the thumbnail is changed
	Thumbnail Thumbnail
	// Sticker set thumbnail's outline represented as a list of closed vector paths; may be
	// empty. The coordinate system origin is in the upper-left corner
	ThumbnailOutline []ClosedVectorPath
	// True, if the sticker set has been installed by the current user
	IsInstalled bool
	// True, if the sticker set has been archived. A sticker set can't be installed and
	// archived simultaneously
	IsArchived bool
	// True, if the sticker set is official
	IsOfficial bool
	// Format of the stickers in the set
	StickerFormat StickerFormatClass
	// Type of the stickers in the set
	StickerType StickerTypeClass
	// True for already viewed trending sticker sets
	IsViewed bool
	// List of stickers in this set
	Stickers []Sticker
	// A list of emoji corresponding to the stickers in the same order. The list is only for
	// informational purposes, because a sticker is always sent with a fixed emoji from the
	// corresponding Sticker object
	Emojis []Emojis
}

// StickerSetTypeID is TL type id of StickerSet.
const StickerSetTypeID = 0x2e5aef95

// Ensuring interfaces in compile-time for StickerSet.
var (
	_ bin.Encoder     = &StickerSet{}
	_ bin.Decoder     = &StickerSet{}
	_ bin.BareEncoder = &StickerSet{}
	_ bin.BareDecoder = &StickerSet{}
)

func (s *StickerSet) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.ID == 0) {
		return false
	}
	if !(s.Title == "") {
		return false
	}
	if !(s.Name == "") {
		return false
	}
	if !(s.Thumbnail.Zero()) {
		return false
	}
	if !(s.ThumbnailOutline == nil) {
		return false
	}
	if !(s.IsInstalled == false) {
		return false
	}
	if !(s.IsArchived == false) {
		return false
	}
	if !(s.IsOfficial == false) {
		return false
	}
	if !(s.StickerFormat == nil) {
		return false
	}
	if !(s.StickerType == nil) {
		return false
	}
	if !(s.IsViewed == false) {
		return false
	}
	if !(s.Stickers == nil) {
		return false
	}
	if !(s.Emojis == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *StickerSet) String() string {
	if s == nil {
		return "StickerSet(nil)"
	}
	type Alias StickerSet
	return fmt.Sprintf("StickerSet%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StickerSet) TypeID() uint32 {
	return StickerSetTypeID
}

// TypeName returns name of type in TL schema.
func (*StickerSet) TypeName() string {
	return "stickerSet"
}

// TypeInfo returns info about TL type.
func (s *StickerSet) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "stickerSet",
		ID:   StickerSetTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ID",
			SchemaName: "id",
		},
		{
			Name:       "Title",
			SchemaName: "title",
		},
		{
			Name:       "Name",
			SchemaName: "name",
		},
		{
			Name:       "Thumbnail",
			SchemaName: "thumbnail",
		},
		{
			Name:       "ThumbnailOutline",
			SchemaName: "thumbnail_outline",
		},
		{
			Name:       "IsInstalled",
			SchemaName: "is_installed",
		},
		{
			Name:       "IsArchived",
			SchemaName: "is_archived",
		},
		{
			Name:       "IsOfficial",
			SchemaName: "is_official",
		},
		{
			Name:       "StickerFormat",
			SchemaName: "sticker_format",
		},
		{
			Name:       "StickerType",
			SchemaName: "sticker_type",
		},
		{
			Name:       "IsViewed",
			SchemaName: "is_viewed",
		},
		{
			Name:       "Stickers",
			SchemaName: "stickers",
		},
		{
			Name:       "Emojis",
			SchemaName: "emojis",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (s *StickerSet) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode stickerSet#2e5aef95 as nil")
	}
	b.PutID(StickerSetTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *StickerSet) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode stickerSet#2e5aef95 as nil")
	}
	b.PutLong(s.ID)
	b.PutString(s.Title)
	b.PutString(s.Name)
	if err := s.Thumbnail.Encode(b); err != nil {
		return fmt.Errorf("unable to encode stickerSet#2e5aef95: field thumbnail: %w", err)
	}
	b.PutInt(len(s.ThumbnailOutline))
	for idx, v := range s.ThumbnailOutline {
		if err := v.EncodeBare(b); err != nil {
			return fmt.Errorf("unable to encode bare stickerSet#2e5aef95: field thumbnail_outline element with index %d: %w", idx, err)
		}
	}
	b.PutBool(s.IsInstalled)
	b.PutBool(s.IsArchived)
	b.PutBool(s.IsOfficial)
	if s.StickerFormat == nil {
		return fmt.Errorf("unable to encode stickerSet#2e5aef95: field sticker_format is nil")
	}
	if err := s.StickerFormat.Encode(b); err != nil {
		return fmt.Errorf("unable to encode stickerSet#2e5aef95: field sticker_format: %w", err)
	}
	if s.StickerType == nil {
		return fmt.Errorf("unable to encode stickerSet#2e5aef95: field sticker_type is nil")
	}
	if err := s.StickerType.Encode(b); err != nil {
		return fmt.Errorf("unable to encode stickerSet#2e5aef95: field sticker_type: %w", err)
	}
	b.PutBool(s.IsViewed)
	b.PutInt(len(s.Stickers))
	for idx, v := range s.Stickers {
		if err := v.EncodeBare(b); err != nil {
			return fmt.Errorf("unable to encode bare stickerSet#2e5aef95: field stickers element with index %d: %w", idx, err)
		}
	}
	b.PutInt(len(s.Emojis))
	for idx, v := range s.Emojis {
		if err := v.EncodeBare(b); err != nil {
			return fmt.Errorf("unable to encode bare stickerSet#2e5aef95: field emojis element with index %d: %w", idx, err)
		}
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *StickerSet) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode stickerSet#2e5aef95 to nil")
	}
	if err := b.ConsumeID(StickerSetTypeID); err != nil {
		return fmt.Errorf("unable to decode stickerSet#2e5aef95: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *StickerSet) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode stickerSet#2e5aef95 to nil")
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode stickerSet#2e5aef95: field id: %w", err)
		}
		s.ID = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode stickerSet#2e5aef95: field title: %w", err)
		}
		s.Title = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode stickerSet#2e5aef95: field name: %w", err)
		}
		s.Name = value
	}
	{
		if err := s.Thumbnail.Decode(b); err != nil {
			return fmt.Errorf("unable to decode stickerSet#2e5aef95: field thumbnail: %w", err)
		}
	}
	{
		headerLen, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode stickerSet#2e5aef95: field thumbnail_outline: %w", err)
		}

		if headerLen > 0 {
			s.ThumbnailOutline = make([]ClosedVectorPath, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			var value ClosedVectorPath
			if err := value.DecodeBare(b); err != nil {
				return fmt.Errorf("unable to decode bare stickerSet#2e5aef95: field thumbnail_outline: %w", err)
			}
			s.ThumbnailOutline = append(s.ThumbnailOutline, value)
		}
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode stickerSet#2e5aef95: field is_installed: %w", err)
		}
		s.IsInstalled = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode stickerSet#2e5aef95: field is_archived: %w", err)
		}
		s.IsArchived = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode stickerSet#2e5aef95: field is_official: %w", err)
		}
		s.IsOfficial = value
	}
	{
		value, err := DecodeStickerFormat(b)
		if err != nil {
			return fmt.Errorf("unable to decode stickerSet#2e5aef95: field sticker_format: %w", err)
		}
		s.StickerFormat = value
	}
	{
		value, err := DecodeStickerType(b)
		if err != nil {
			return fmt.Errorf("unable to decode stickerSet#2e5aef95: field sticker_type: %w", err)
		}
		s.StickerType = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode stickerSet#2e5aef95: field is_viewed: %w", err)
		}
		s.IsViewed = value
	}
	{
		headerLen, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode stickerSet#2e5aef95: field stickers: %w", err)
		}

		if headerLen > 0 {
			s.Stickers = make([]Sticker, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			var value Sticker
			if err := value.DecodeBare(b); err != nil {
				return fmt.Errorf("unable to decode bare stickerSet#2e5aef95: field stickers: %w", err)
			}
			s.Stickers = append(s.Stickers, value)
		}
	}
	{
		headerLen, err := b.Int()
		if err != nil {
			return fmt.Errorf("unable to decode stickerSet#2e5aef95: field emojis: %w", err)
		}

		if headerLen > 0 {
			s.Emojis = make([]Emojis, 0, headerLen%bin.PreallocateLimit)
		}
		for idx := 0; idx < headerLen; idx++ {
			var value Emojis
			if err := value.DecodeBare(b); err != nil {
				return fmt.Errorf("unable to decode bare stickerSet#2e5aef95: field emojis: %w", err)
			}
			s.Emojis = append(s.Emojis, value)
		}
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (s *StickerSet) EncodeTDLibJSON(b tdjson.Encoder) error {
	if s == nil {
		return fmt.Errorf("can't encode stickerSet#2e5aef95 as nil")
	}
	b.ObjStart()
	b.PutID("stickerSet")
	b.Comma()
	b.FieldStart("id")
	b.PutLong(s.ID)
	b.Comma()
	b.FieldStart("title")
	b.PutString(s.Title)
	b.Comma()
	b.FieldStart("name")
	b.PutString(s.Name)
	b.Comma()
	b.FieldStart("thumbnail")
	if err := s.Thumbnail.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode stickerSet#2e5aef95: field thumbnail: %w", err)
	}
	b.Comma()
	b.FieldStart("thumbnail_outline")
	b.ArrStart()
	for idx, v := range s.ThumbnailOutline {
		if err := v.EncodeTDLibJSON(b); err != nil {
			return fmt.Errorf("unable to encode stickerSet#2e5aef95: field thumbnail_outline element with index %d: %w", idx, err)
		}
		b.Comma()
	}
	b.StripComma()
	b.ArrEnd()
	b.Comma()
	b.FieldStart("is_installed")
	b.PutBool(s.IsInstalled)
	b.Comma()
	b.FieldStart("is_archived")
	b.PutBool(s.IsArchived)
	b.Comma()
	b.FieldStart("is_official")
	b.PutBool(s.IsOfficial)
	b.Comma()
	b.FieldStart("sticker_format")
	if s.StickerFormat == nil {
		return fmt.Errorf("unable to encode stickerSet#2e5aef95: field sticker_format is nil")
	}
	if err := s.StickerFormat.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode stickerSet#2e5aef95: field sticker_format: %w", err)
	}
	b.Comma()
	b.FieldStart("sticker_type")
	if s.StickerType == nil {
		return fmt.Errorf("unable to encode stickerSet#2e5aef95: field sticker_type is nil")
	}
	if err := s.StickerType.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode stickerSet#2e5aef95: field sticker_type: %w", err)
	}
	b.Comma()
	b.FieldStart("is_viewed")
	b.PutBool(s.IsViewed)
	b.Comma()
	b.FieldStart("stickers")
	b.ArrStart()
	for idx, v := range s.Stickers {
		if err := v.EncodeTDLibJSON(b); err != nil {
			return fmt.Errorf("unable to encode stickerSet#2e5aef95: field stickers element with index %d: %w", idx, err)
		}
		b.Comma()
	}
	b.StripComma()
	b.ArrEnd()
	b.Comma()
	b.FieldStart("emojis")
	b.ArrStart()
	for idx, v := range s.Emojis {
		if err := v.EncodeTDLibJSON(b); err != nil {
			return fmt.Errorf("unable to encode stickerSet#2e5aef95: field emojis element with index %d: %w", idx, err)
		}
		b.Comma()
	}
	b.StripComma()
	b.ArrEnd()
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (s *StickerSet) DecodeTDLibJSON(b tdjson.Decoder) error {
	if s == nil {
		return fmt.Errorf("can't decode stickerSet#2e5aef95 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("stickerSet"); err != nil {
				return fmt.Errorf("unable to decode stickerSet#2e5aef95: %w", err)
			}
		case "id":
			value, err := b.Long()
			if err != nil {
				return fmt.Errorf("unable to decode stickerSet#2e5aef95: field id: %w", err)
			}
			s.ID = value
		case "title":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode stickerSet#2e5aef95: field title: %w", err)
			}
			s.Title = value
		case "name":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode stickerSet#2e5aef95: field name: %w", err)
			}
			s.Name = value
		case "thumbnail":
			if err := s.Thumbnail.DecodeTDLibJSON(b); err != nil {
				return fmt.Errorf("unable to decode stickerSet#2e5aef95: field thumbnail: %w", err)
			}
		case "thumbnail_outline":
			if err := b.Arr(func(b tdjson.Decoder) error {
				var value ClosedVectorPath
				if err := value.DecodeTDLibJSON(b); err != nil {
					return fmt.Errorf("unable to decode stickerSet#2e5aef95: field thumbnail_outline: %w", err)
				}
				s.ThumbnailOutline = append(s.ThumbnailOutline, value)
				return nil
			}); err != nil {
				return fmt.Errorf("unable to decode stickerSet#2e5aef95: field thumbnail_outline: %w", err)
			}
		case "is_installed":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode stickerSet#2e5aef95: field is_installed: %w", err)
			}
			s.IsInstalled = value
		case "is_archived":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode stickerSet#2e5aef95: field is_archived: %w", err)
			}
			s.IsArchived = value
		case "is_official":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode stickerSet#2e5aef95: field is_official: %w", err)
			}
			s.IsOfficial = value
		case "sticker_format":
			value, err := DecodeTDLibJSONStickerFormat(b)
			if err != nil {
				return fmt.Errorf("unable to decode stickerSet#2e5aef95: field sticker_format: %w", err)
			}
			s.StickerFormat = value
		case "sticker_type":
			value, err := DecodeTDLibJSONStickerType(b)
			if err != nil {
				return fmt.Errorf("unable to decode stickerSet#2e5aef95: field sticker_type: %w", err)
			}
			s.StickerType = value
		case "is_viewed":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode stickerSet#2e5aef95: field is_viewed: %w", err)
			}
			s.IsViewed = value
		case "stickers":
			if err := b.Arr(func(b tdjson.Decoder) error {
				var value Sticker
				if err := value.DecodeTDLibJSON(b); err != nil {
					return fmt.Errorf("unable to decode stickerSet#2e5aef95: field stickers: %w", err)
				}
				s.Stickers = append(s.Stickers, value)
				return nil
			}); err != nil {
				return fmt.Errorf("unable to decode stickerSet#2e5aef95: field stickers: %w", err)
			}
		case "emojis":
			if err := b.Arr(func(b tdjson.Decoder) error {
				var value Emojis
				if err := value.DecodeTDLibJSON(b); err != nil {
					return fmt.Errorf("unable to decode stickerSet#2e5aef95: field emojis: %w", err)
				}
				s.Emojis = append(s.Emojis, value)
				return nil
			}); err != nil {
				return fmt.Errorf("unable to decode stickerSet#2e5aef95: field emojis: %w", err)
			}
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetID returns value of ID field.
func (s *StickerSet) GetID() (value int64) {
	if s == nil {
		return
	}
	return s.ID
}

// GetTitle returns value of Title field.
func (s *StickerSet) GetTitle() (value string) {
	if s == nil {
		return
	}
	return s.Title
}

// GetName returns value of Name field.
func (s *StickerSet) GetName() (value string) {
	if s == nil {
		return
	}
	return s.Name
}

// GetThumbnail returns value of Thumbnail field.
func (s *StickerSet) GetThumbnail() (value Thumbnail) {
	if s == nil {
		return
	}
	return s.Thumbnail
}

// GetThumbnailOutline returns value of ThumbnailOutline field.
func (s *StickerSet) GetThumbnailOutline() (value []ClosedVectorPath) {
	if s == nil {
		return
	}
	return s.ThumbnailOutline
}

// GetIsInstalled returns value of IsInstalled field.
func (s *StickerSet) GetIsInstalled() (value bool) {
	if s == nil {
		return
	}
	return s.IsInstalled
}

// GetIsArchived returns value of IsArchived field.
func (s *StickerSet) GetIsArchived() (value bool) {
	if s == nil {
		return
	}
	return s.IsArchived
}

// GetIsOfficial returns value of IsOfficial field.
func (s *StickerSet) GetIsOfficial() (value bool) {
	if s == nil {
		return
	}
	return s.IsOfficial
}

// GetStickerFormat returns value of StickerFormat field.
func (s *StickerSet) GetStickerFormat() (value StickerFormatClass) {
	if s == nil {
		return
	}
	return s.StickerFormat
}

// GetStickerType returns value of StickerType field.
func (s *StickerSet) GetStickerType() (value StickerTypeClass) {
	if s == nil {
		return
	}
	return s.StickerType
}

// GetIsViewed returns value of IsViewed field.
func (s *StickerSet) GetIsViewed() (value bool) {
	if s == nil {
		return
	}
	return s.IsViewed
}

// GetStickers returns value of Stickers field.
func (s *StickerSet) GetStickers() (value []Sticker) {
	if s == nil {
		return
	}
	return s.Stickers
}

// GetEmojis returns value of Emojis field.
func (s *StickerSet) GetEmojis() (value []Emojis) {
	if s == nil {
		return
	}
	return s.Emojis
}
