// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// GetGroupCallStreamSegmentRequest represents TL type `getGroupCallStreamSegment#8424daa5`.
type GetGroupCallStreamSegmentRequest struct {
	// Group call identifier
	GroupCallID int32
	// Point in time when the stream segment begins; Unix timestamp in milliseconds
	TimeOffset int64
	// Segment duration scale; 0-1. Segment's duration is 1000/(2**scale) milliseconds
	Scale int32
	// Identifier of an audio/video channel to get as received from tgcalls
	ChannelID int32
	// Video quality as received from tgcalls; pass null to get the worst available quality
	VideoQuality GroupCallVideoQualityClass
}

// GetGroupCallStreamSegmentRequestTypeID is TL type id of GetGroupCallStreamSegmentRequest.
const GetGroupCallStreamSegmentRequestTypeID = 0x8424daa5

// Ensuring interfaces in compile-time for GetGroupCallStreamSegmentRequest.
var (
	_ bin.Encoder     = &GetGroupCallStreamSegmentRequest{}
	_ bin.Decoder     = &GetGroupCallStreamSegmentRequest{}
	_ bin.BareEncoder = &GetGroupCallStreamSegmentRequest{}
	_ bin.BareDecoder = &GetGroupCallStreamSegmentRequest{}
)

func (g *GetGroupCallStreamSegmentRequest) Zero() bool {
	if g == nil {
		return true
	}
	if !(g.GroupCallID == 0) {
		return false
	}
	if !(g.TimeOffset == 0) {
		return false
	}
	if !(g.Scale == 0) {
		return false
	}
	if !(g.ChannelID == 0) {
		return false
	}
	if !(g.VideoQuality == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (g *GetGroupCallStreamSegmentRequest) String() string {
	if g == nil {
		return "GetGroupCallStreamSegmentRequest(nil)"
	}
	type Alias GetGroupCallStreamSegmentRequest
	return fmt.Sprintf("GetGroupCallStreamSegmentRequest%+v", Alias(*g))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*GetGroupCallStreamSegmentRequest) TypeID() uint32 {
	return GetGroupCallStreamSegmentRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*GetGroupCallStreamSegmentRequest) TypeName() string {
	return "getGroupCallStreamSegment"
}

// TypeInfo returns info about TL type.
func (g *GetGroupCallStreamSegmentRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "getGroupCallStreamSegment",
		ID:   GetGroupCallStreamSegmentRequestTypeID,
	}
	if g == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "GroupCallID",
			SchemaName: "group_call_id",
		},
		{
			Name:       "TimeOffset",
			SchemaName: "time_offset",
		},
		{
			Name:       "Scale",
			SchemaName: "scale",
		},
		{
			Name:       "ChannelID",
			SchemaName: "channel_id",
		},
		{
			Name:       "VideoQuality",
			SchemaName: "video_quality",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (g *GetGroupCallStreamSegmentRequest) Encode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode getGroupCallStreamSegment#8424daa5 as nil")
	}
	b.PutID(GetGroupCallStreamSegmentRequestTypeID)
	return g.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (g *GetGroupCallStreamSegmentRequest) EncodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't encode getGroupCallStreamSegment#8424daa5 as nil")
	}
	b.PutInt32(g.GroupCallID)
	b.PutInt53(g.TimeOffset)
	b.PutInt32(g.Scale)
	b.PutInt32(g.ChannelID)
	if g.VideoQuality == nil {
		return fmt.Errorf("unable to encode getGroupCallStreamSegment#8424daa5: field video_quality is nil")
	}
	if err := g.VideoQuality.Encode(b); err != nil {
		return fmt.Errorf("unable to encode getGroupCallStreamSegment#8424daa5: field video_quality: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (g *GetGroupCallStreamSegmentRequest) Decode(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode getGroupCallStreamSegment#8424daa5 to nil")
	}
	if err := b.ConsumeID(GetGroupCallStreamSegmentRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode getGroupCallStreamSegment#8424daa5: %w", err)
	}
	return g.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (g *GetGroupCallStreamSegmentRequest) DecodeBare(b *bin.Buffer) error {
	if g == nil {
		return fmt.Errorf("can't decode getGroupCallStreamSegment#8424daa5 to nil")
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode getGroupCallStreamSegment#8424daa5: field group_call_id: %w", err)
		}
		g.GroupCallID = value
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode getGroupCallStreamSegment#8424daa5: field time_offset: %w", err)
		}
		g.TimeOffset = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode getGroupCallStreamSegment#8424daa5: field scale: %w", err)
		}
		g.Scale = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode getGroupCallStreamSegment#8424daa5: field channel_id: %w", err)
		}
		g.ChannelID = value
	}
	{
		value, err := DecodeGroupCallVideoQuality(b)
		if err != nil {
			return fmt.Errorf("unable to decode getGroupCallStreamSegment#8424daa5: field video_quality: %w", err)
		}
		g.VideoQuality = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (g *GetGroupCallStreamSegmentRequest) EncodeTDLibJSON(b tdjson.Encoder) error {
	if g == nil {
		return fmt.Errorf("can't encode getGroupCallStreamSegment#8424daa5 as nil")
	}
	b.ObjStart()
	b.PutID("getGroupCallStreamSegment")
	b.Comma()
	b.FieldStart("group_call_id")
	b.PutInt32(g.GroupCallID)
	b.Comma()
	b.FieldStart("time_offset")
	b.PutInt53(g.TimeOffset)
	b.Comma()
	b.FieldStart("scale")
	b.PutInt32(g.Scale)
	b.Comma()
	b.FieldStart("channel_id")
	b.PutInt32(g.ChannelID)
	b.Comma()
	b.FieldStart("video_quality")
	if g.VideoQuality == nil {
		return fmt.Errorf("unable to encode getGroupCallStreamSegment#8424daa5: field video_quality is nil")
	}
	if err := g.VideoQuality.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode getGroupCallStreamSegment#8424daa5: field video_quality: %w", err)
	}
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (g *GetGroupCallStreamSegmentRequest) DecodeTDLibJSON(b tdjson.Decoder) error {
	if g == nil {
		return fmt.Errorf("can't decode getGroupCallStreamSegment#8424daa5 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("getGroupCallStreamSegment"); err != nil {
				return fmt.Errorf("unable to decode getGroupCallStreamSegment#8424daa5: %w", err)
			}
		case "group_call_id":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode getGroupCallStreamSegment#8424daa5: field group_call_id: %w", err)
			}
			g.GroupCallID = value
		case "time_offset":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode getGroupCallStreamSegment#8424daa5: field time_offset: %w", err)
			}
			g.TimeOffset = value
		case "scale":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode getGroupCallStreamSegment#8424daa5: field scale: %w", err)
			}
			g.Scale = value
		case "channel_id":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode getGroupCallStreamSegment#8424daa5: field channel_id: %w", err)
			}
			g.ChannelID = value
		case "video_quality":
			value, err := DecodeTDLibJSONGroupCallVideoQuality(b)
			if err != nil {
				return fmt.Errorf("unable to decode getGroupCallStreamSegment#8424daa5: field video_quality: %w", err)
			}
			g.VideoQuality = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetGroupCallID returns value of GroupCallID field.
func (g *GetGroupCallStreamSegmentRequest) GetGroupCallID() (value int32) {
	if g == nil {
		return
	}
	return g.GroupCallID
}

// GetTimeOffset returns value of TimeOffset field.
func (g *GetGroupCallStreamSegmentRequest) GetTimeOffset() (value int64) {
	if g == nil {
		return
	}
	return g.TimeOffset
}

// GetScale returns value of Scale field.
func (g *GetGroupCallStreamSegmentRequest) GetScale() (value int32) {
	if g == nil {
		return
	}
	return g.Scale
}

// GetChannelID returns value of ChannelID field.
func (g *GetGroupCallStreamSegmentRequest) GetChannelID() (value int32) {
	if g == nil {
		return
	}
	return g.ChannelID
}

// GetVideoQuality returns value of VideoQuality field.
func (g *GetGroupCallStreamSegmentRequest) GetVideoQuality() (value GroupCallVideoQualityClass) {
	if g == nil {
		return
	}
	return g.VideoQuality
}

// GetGroupCallStreamSegment invokes method getGroupCallStreamSegment#8424daa5 returning error if any.
func (c *Client) GetGroupCallStreamSegment(ctx context.Context, request *GetGroupCallStreamSegmentRequest) (*FilePart, error) {
	var result FilePart

	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return &result, nil
}
