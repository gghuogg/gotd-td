// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// MessageSponsorTypeBot represents TL type `messageSponsorTypeBot#700d2304`.
type MessageSponsorTypeBot struct {
	// User identifier of the bot
	BotUserID int64
	// An internal link to be opened when the sponsored message is clicked
	Link InternalLinkTypeClass
}

// MessageSponsorTypeBotTypeID is TL type id of MessageSponsorTypeBot.
const MessageSponsorTypeBotTypeID = 0x700d2304

// construct implements constructor of MessageSponsorTypeClass.
func (m MessageSponsorTypeBot) construct() MessageSponsorTypeClass { return &m }

// Ensuring interfaces in compile-time for MessageSponsorTypeBot.
var (
	_ bin.Encoder     = &MessageSponsorTypeBot{}
	_ bin.Decoder     = &MessageSponsorTypeBot{}
	_ bin.BareEncoder = &MessageSponsorTypeBot{}
	_ bin.BareDecoder = &MessageSponsorTypeBot{}

	_ MessageSponsorTypeClass = &MessageSponsorTypeBot{}
)

func (m *MessageSponsorTypeBot) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.BotUserID == 0) {
		return false
	}
	if !(m.Link == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageSponsorTypeBot) String() string {
	if m == nil {
		return "MessageSponsorTypeBot(nil)"
	}
	type Alias MessageSponsorTypeBot
	return fmt.Sprintf("MessageSponsorTypeBot%+v", Alias(*m))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessageSponsorTypeBot) TypeID() uint32 {
	return MessageSponsorTypeBotTypeID
}

// TypeName returns name of type in TL schema.
func (*MessageSponsorTypeBot) TypeName() string {
	return "messageSponsorTypeBot"
}

// TypeInfo returns info about TL type.
func (m *MessageSponsorTypeBot) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messageSponsorTypeBot",
		ID:   MessageSponsorTypeBotTypeID,
	}
	if m == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "BotUserID",
			SchemaName: "bot_user_id",
		},
		{
			Name:       "Link",
			SchemaName: "link",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (m *MessageSponsorTypeBot) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageSponsorTypeBot#700d2304 as nil")
	}
	b.PutID(MessageSponsorTypeBotTypeID)
	return m.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (m *MessageSponsorTypeBot) EncodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageSponsorTypeBot#700d2304 as nil")
	}
	b.PutInt53(m.BotUserID)
	if m.Link == nil {
		return fmt.Errorf("unable to encode messageSponsorTypeBot#700d2304: field link is nil")
	}
	if err := m.Link.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messageSponsorTypeBot#700d2304: field link: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (m *MessageSponsorTypeBot) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageSponsorTypeBot#700d2304 to nil")
	}
	if err := b.ConsumeID(MessageSponsorTypeBotTypeID); err != nil {
		return fmt.Errorf("unable to decode messageSponsorTypeBot#700d2304: %w", err)
	}
	return m.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (m *MessageSponsorTypeBot) DecodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageSponsorTypeBot#700d2304 to nil")
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode messageSponsorTypeBot#700d2304: field bot_user_id: %w", err)
		}
		m.BotUserID = value
	}
	{
		value, err := DecodeInternalLinkType(b)
		if err != nil {
			return fmt.Errorf("unable to decode messageSponsorTypeBot#700d2304: field link: %w", err)
		}
		m.Link = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (m *MessageSponsorTypeBot) EncodeTDLibJSON(b tdjson.Encoder) error {
	if m == nil {
		return fmt.Errorf("can't encode messageSponsorTypeBot#700d2304 as nil")
	}
	b.ObjStart()
	b.PutID("messageSponsorTypeBot")
	b.Comma()
	b.FieldStart("bot_user_id")
	b.PutInt53(m.BotUserID)
	b.Comma()
	b.FieldStart("link")
	if m.Link == nil {
		return fmt.Errorf("unable to encode messageSponsorTypeBot#700d2304: field link is nil")
	}
	if err := m.Link.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode messageSponsorTypeBot#700d2304: field link: %w", err)
	}
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (m *MessageSponsorTypeBot) DecodeTDLibJSON(b tdjson.Decoder) error {
	if m == nil {
		return fmt.Errorf("can't decode messageSponsorTypeBot#700d2304 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("messageSponsorTypeBot"); err != nil {
				return fmt.Errorf("unable to decode messageSponsorTypeBot#700d2304: %w", err)
			}
		case "bot_user_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode messageSponsorTypeBot#700d2304: field bot_user_id: %w", err)
			}
			m.BotUserID = value
		case "link":
			value, err := DecodeTDLibJSONInternalLinkType(b)
			if err != nil {
				return fmt.Errorf("unable to decode messageSponsorTypeBot#700d2304: field link: %w", err)
			}
			m.Link = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetBotUserID returns value of BotUserID field.
func (m *MessageSponsorTypeBot) GetBotUserID() (value int64) {
	if m == nil {
		return
	}
	return m.BotUserID
}

// GetLink returns value of Link field.
func (m *MessageSponsorTypeBot) GetLink() (value InternalLinkTypeClass) {
	if m == nil {
		return
	}
	return m.Link
}

// MessageSponsorTypePublicChannel represents TL type `messageSponsorTypePublicChannel#ed645a47`.
type MessageSponsorTypePublicChannel struct {
	// Sponsor chat identifier
	ChatID int64
	// An internal link to be opened when the sponsored message is clicked; may be null if
	// the sponsor chat needs to be opened instead
	Link InternalLinkTypeClass
}

// MessageSponsorTypePublicChannelTypeID is TL type id of MessageSponsorTypePublicChannel.
const MessageSponsorTypePublicChannelTypeID = 0xed645a47

// construct implements constructor of MessageSponsorTypeClass.
func (m MessageSponsorTypePublicChannel) construct() MessageSponsorTypeClass { return &m }

// Ensuring interfaces in compile-time for MessageSponsorTypePublicChannel.
var (
	_ bin.Encoder     = &MessageSponsorTypePublicChannel{}
	_ bin.Decoder     = &MessageSponsorTypePublicChannel{}
	_ bin.BareEncoder = &MessageSponsorTypePublicChannel{}
	_ bin.BareDecoder = &MessageSponsorTypePublicChannel{}

	_ MessageSponsorTypeClass = &MessageSponsorTypePublicChannel{}
)

func (m *MessageSponsorTypePublicChannel) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.ChatID == 0) {
		return false
	}
	if !(m.Link == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageSponsorTypePublicChannel) String() string {
	if m == nil {
		return "MessageSponsorTypePublicChannel(nil)"
	}
	type Alias MessageSponsorTypePublicChannel
	return fmt.Sprintf("MessageSponsorTypePublicChannel%+v", Alias(*m))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessageSponsorTypePublicChannel) TypeID() uint32 {
	return MessageSponsorTypePublicChannelTypeID
}

// TypeName returns name of type in TL schema.
func (*MessageSponsorTypePublicChannel) TypeName() string {
	return "messageSponsorTypePublicChannel"
}

// TypeInfo returns info about TL type.
func (m *MessageSponsorTypePublicChannel) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messageSponsorTypePublicChannel",
		ID:   MessageSponsorTypePublicChannelTypeID,
	}
	if m == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ChatID",
			SchemaName: "chat_id",
		},
		{
			Name:       "Link",
			SchemaName: "link",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (m *MessageSponsorTypePublicChannel) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageSponsorTypePublicChannel#ed645a47 as nil")
	}
	b.PutID(MessageSponsorTypePublicChannelTypeID)
	return m.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (m *MessageSponsorTypePublicChannel) EncodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageSponsorTypePublicChannel#ed645a47 as nil")
	}
	b.PutInt53(m.ChatID)
	if m.Link == nil {
		return fmt.Errorf("unable to encode messageSponsorTypePublicChannel#ed645a47: field link is nil")
	}
	if err := m.Link.Encode(b); err != nil {
		return fmt.Errorf("unable to encode messageSponsorTypePublicChannel#ed645a47: field link: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (m *MessageSponsorTypePublicChannel) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageSponsorTypePublicChannel#ed645a47 to nil")
	}
	if err := b.ConsumeID(MessageSponsorTypePublicChannelTypeID); err != nil {
		return fmt.Errorf("unable to decode messageSponsorTypePublicChannel#ed645a47: %w", err)
	}
	return m.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (m *MessageSponsorTypePublicChannel) DecodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageSponsorTypePublicChannel#ed645a47 to nil")
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode messageSponsorTypePublicChannel#ed645a47: field chat_id: %w", err)
		}
		m.ChatID = value
	}
	{
		value, err := DecodeInternalLinkType(b)
		if err != nil {
			return fmt.Errorf("unable to decode messageSponsorTypePublicChannel#ed645a47: field link: %w", err)
		}
		m.Link = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (m *MessageSponsorTypePublicChannel) EncodeTDLibJSON(b tdjson.Encoder) error {
	if m == nil {
		return fmt.Errorf("can't encode messageSponsorTypePublicChannel#ed645a47 as nil")
	}
	b.ObjStart()
	b.PutID("messageSponsorTypePublicChannel")
	b.Comma()
	b.FieldStart("chat_id")
	b.PutInt53(m.ChatID)
	b.Comma()
	b.FieldStart("link")
	if m.Link == nil {
		return fmt.Errorf("unable to encode messageSponsorTypePublicChannel#ed645a47: field link is nil")
	}
	if err := m.Link.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode messageSponsorTypePublicChannel#ed645a47: field link: %w", err)
	}
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (m *MessageSponsorTypePublicChannel) DecodeTDLibJSON(b tdjson.Decoder) error {
	if m == nil {
		return fmt.Errorf("can't decode messageSponsorTypePublicChannel#ed645a47 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("messageSponsorTypePublicChannel"); err != nil {
				return fmt.Errorf("unable to decode messageSponsorTypePublicChannel#ed645a47: %w", err)
			}
		case "chat_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode messageSponsorTypePublicChannel#ed645a47: field chat_id: %w", err)
			}
			m.ChatID = value
		case "link":
			value, err := DecodeTDLibJSONInternalLinkType(b)
			if err != nil {
				return fmt.Errorf("unable to decode messageSponsorTypePublicChannel#ed645a47: field link: %w", err)
			}
			m.Link = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetChatID returns value of ChatID field.
func (m *MessageSponsorTypePublicChannel) GetChatID() (value int64) {
	if m == nil {
		return
	}
	return m.ChatID
}

// GetLink returns value of Link field.
func (m *MessageSponsorTypePublicChannel) GetLink() (value InternalLinkTypeClass) {
	if m == nil {
		return
	}
	return m.Link
}

// MessageSponsorTypePrivateChannel represents TL type `messageSponsorTypePrivateChannel#74d245a8`.
type MessageSponsorTypePrivateChannel struct {
	// Title of the chat
	Title string
	// Invite link for the channel
	InviteLink string
}

// MessageSponsorTypePrivateChannelTypeID is TL type id of MessageSponsorTypePrivateChannel.
const MessageSponsorTypePrivateChannelTypeID = 0x74d245a8

// construct implements constructor of MessageSponsorTypeClass.
func (m MessageSponsorTypePrivateChannel) construct() MessageSponsorTypeClass { return &m }

// Ensuring interfaces in compile-time for MessageSponsorTypePrivateChannel.
var (
	_ bin.Encoder     = &MessageSponsorTypePrivateChannel{}
	_ bin.Decoder     = &MessageSponsorTypePrivateChannel{}
	_ bin.BareEncoder = &MessageSponsorTypePrivateChannel{}
	_ bin.BareDecoder = &MessageSponsorTypePrivateChannel{}

	_ MessageSponsorTypeClass = &MessageSponsorTypePrivateChannel{}
)

func (m *MessageSponsorTypePrivateChannel) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.Title == "") {
		return false
	}
	if !(m.InviteLink == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageSponsorTypePrivateChannel) String() string {
	if m == nil {
		return "MessageSponsorTypePrivateChannel(nil)"
	}
	type Alias MessageSponsorTypePrivateChannel
	return fmt.Sprintf("MessageSponsorTypePrivateChannel%+v", Alias(*m))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessageSponsorTypePrivateChannel) TypeID() uint32 {
	return MessageSponsorTypePrivateChannelTypeID
}

// TypeName returns name of type in TL schema.
func (*MessageSponsorTypePrivateChannel) TypeName() string {
	return "messageSponsorTypePrivateChannel"
}

// TypeInfo returns info about TL type.
func (m *MessageSponsorTypePrivateChannel) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messageSponsorTypePrivateChannel",
		ID:   MessageSponsorTypePrivateChannelTypeID,
	}
	if m == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Title",
			SchemaName: "title",
		},
		{
			Name:       "InviteLink",
			SchemaName: "invite_link",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (m *MessageSponsorTypePrivateChannel) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageSponsorTypePrivateChannel#74d245a8 as nil")
	}
	b.PutID(MessageSponsorTypePrivateChannelTypeID)
	return m.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (m *MessageSponsorTypePrivateChannel) EncodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageSponsorTypePrivateChannel#74d245a8 as nil")
	}
	b.PutString(m.Title)
	b.PutString(m.InviteLink)
	return nil
}

// Decode implements bin.Decoder.
func (m *MessageSponsorTypePrivateChannel) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageSponsorTypePrivateChannel#74d245a8 to nil")
	}
	if err := b.ConsumeID(MessageSponsorTypePrivateChannelTypeID); err != nil {
		return fmt.Errorf("unable to decode messageSponsorTypePrivateChannel#74d245a8: %w", err)
	}
	return m.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (m *MessageSponsorTypePrivateChannel) DecodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageSponsorTypePrivateChannel#74d245a8 to nil")
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode messageSponsorTypePrivateChannel#74d245a8: field title: %w", err)
		}
		m.Title = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode messageSponsorTypePrivateChannel#74d245a8: field invite_link: %w", err)
		}
		m.InviteLink = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (m *MessageSponsorTypePrivateChannel) EncodeTDLibJSON(b tdjson.Encoder) error {
	if m == nil {
		return fmt.Errorf("can't encode messageSponsorTypePrivateChannel#74d245a8 as nil")
	}
	b.ObjStart()
	b.PutID("messageSponsorTypePrivateChannel")
	b.Comma()
	b.FieldStart("title")
	b.PutString(m.Title)
	b.Comma()
	b.FieldStart("invite_link")
	b.PutString(m.InviteLink)
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (m *MessageSponsorTypePrivateChannel) DecodeTDLibJSON(b tdjson.Decoder) error {
	if m == nil {
		return fmt.Errorf("can't decode messageSponsorTypePrivateChannel#74d245a8 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("messageSponsorTypePrivateChannel"); err != nil {
				return fmt.Errorf("unable to decode messageSponsorTypePrivateChannel#74d245a8: %w", err)
			}
		case "title":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode messageSponsorTypePrivateChannel#74d245a8: field title: %w", err)
			}
			m.Title = value
		case "invite_link":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode messageSponsorTypePrivateChannel#74d245a8: field invite_link: %w", err)
			}
			m.InviteLink = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetTitle returns value of Title field.
func (m *MessageSponsorTypePrivateChannel) GetTitle() (value string) {
	if m == nil {
		return
	}
	return m.Title
}

// GetInviteLink returns value of InviteLink field.
func (m *MessageSponsorTypePrivateChannel) GetInviteLink() (value string) {
	if m == nil {
		return
	}
	return m.InviteLink
}

// MessageSponsorTypeWebsite represents TL type `messageSponsorTypeWebsite#a4e45f9b`.
type MessageSponsorTypeWebsite struct {
	// URL of the website
	URL string
	// Name of the website
	Name string
}

// MessageSponsorTypeWebsiteTypeID is TL type id of MessageSponsorTypeWebsite.
const MessageSponsorTypeWebsiteTypeID = 0xa4e45f9b

// construct implements constructor of MessageSponsorTypeClass.
func (m MessageSponsorTypeWebsite) construct() MessageSponsorTypeClass { return &m }

// Ensuring interfaces in compile-time for MessageSponsorTypeWebsite.
var (
	_ bin.Encoder     = &MessageSponsorTypeWebsite{}
	_ bin.Decoder     = &MessageSponsorTypeWebsite{}
	_ bin.BareEncoder = &MessageSponsorTypeWebsite{}
	_ bin.BareDecoder = &MessageSponsorTypeWebsite{}

	_ MessageSponsorTypeClass = &MessageSponsorTypeWebsite{}
)

func (m *MessageSponsorTypeWebsite) Zero() bool {
	if m == nil {
		return true
	}
	if !(m.URL == "") {
		return false
	}
	if !(m.Name == "") {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (m *MessageSponsorTypeWebsite) String() string {
	if m == nil {
		return "MessageSponsorTypeWebsite(nil)"
	}
	type Alias MessageSponsorTypeWebsite
	return fmt.Sprintf("MessageSponsorTypeWebsite%+v", Alias(*m))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*MessageSponsorTypeWebsite) TypeID() uint32 {
	return MessageSponsorTypeWebsiteTypeID
}

// TypeName returns name of type in TL schema.
func (*MessageSponsorTypeWebsite) TypeName() string {
	return "messageSponsorTypeWebsite"
}

// TypeInfo returns info about TL type.
func (m *MessageSponsorTypeWebsite) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "messageSponsorTypeWebsite",
		ID:   MessageSponsorTypeWebsiteTypeID,
	}
	if m == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "URL",
			SchemaName: "url",
		},
		{
			Name:       "Name",
			SchemaName: "name",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (m *MessageSponsorTypeWebsite) Encode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageSponsorTypeWebsite#a4e45f9b as nil")
	}
	b.PutID(MessageSponsorTypeWebsiteTypeID)
	return m.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (m *MessageSponsorTypeWebsite) EncodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't encode messageSponsorTypeWebsite#a4e45f9b as nil")
	}
	b.PutString(m.URL)
	b.PutString(m.Name)
	return nil
}

// Decode implements bin.Decoder.
func (m *MessageSponsorTypeWebsite) Decode(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageSponsorTypeWebsite#a4e45f9b to nil")
	}
	if err := b.ConsumeID(MessageSponsorTypeWebsiteTypeID); err != nil {
		return fmt.Errorf("unable to decode messageSponsorTypeWebsite#a4e45f9b: %w", err)
	}
	return m.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (m *MessageSponsorTypeWebsite) DecodeBare(b *bin.Buffer) error {
	if m == nil {
		return fmt.Errorf("can't decode messageSponsorTypeWebsite#a4e45f9b to nil")
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode messageSponsorTypeWebsite#a4e45f9b: field url: %w", err)
		}
		m.URL = value
	}
	{
		value, err := b.String()
		if err != nil {
			return fmt.Errorf("unable to decode messageSponsorTypeWebsite#a4e45f9b: field name: %w", err)
		}
		m.Name = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (m *MessageSponsorTypeWebsite) EncodeTDLibJSON(b tdjson.Encoder) error {
	if m == nil {
		return fmt.Errorf("can't encode messageSponsorTypeWebsite#a4e45f9b as nil")
	}
	b.ObjStart()
	b.PutID("messageSponsorTypeWebsite")
	b.Comma()
	b.FieldStart("url")
	b.PutString(m.URL)
	b.Comma()
	b.FieldStart("name")
	b.PutString(m.Name)
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (m *MessageSponsorTypeWebsite) DecodeTDLibJSON(b tdjson.Decoder) error {
	if m == nil {
		return fmt.Errorf("can't decode messageSponsorTypeWebsite#a4e45f9b to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("messageSponsorTypeWebsite"); err != nil {
				return fmt.Errorf("unable to decode messageSponsorTypeWebsite#a4e45f9b: %w", err)
			}
		case "url":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode messageSponsorTypeWebsite#a4e45f9b: field url: %w", err)
			}
			m.URL = value
		case "name":
			value, err := b.String()
			if err != nil {
				return fmt.Errorf("unable to decode messageSponsorTypeWebsite#a4e45f9b: field name: %w", err)
			}
			m.Name = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetURL returns value of URL field.
func (m *MessageSponsorTypeWebsite) GetURL() (value string) {
	if m == nil {
		return
	}
	return m.URL
}

// GetName returns value of Name field.
func (m *MessageSponsorTypeWebsite) GetName() (value string) {
	if m == nil {
		return
	}
	return m.Name
}

// MessageSponsorTypeClassName is schema name of MessageSponsorTypeClass.
const MessageSponsorTypeClassName = "MessageSponsorType"

// MessageSponsorTypeClass represents MessageSponsorType generic type.
//
// Example:
//
//	g, err := tdapi.DecodeMessageSponsorType(buf)
//	if err != nil {
//	    panic(err)
//	}
//	switch v := g.(type) {
//	case *tdapi.MessageSponsorTypeBot: // messageSponsorTypeBot#700d2304
//	case *tdapi.MessageSponsorTypePublicChannel: // messageSponsorTypePublicChannel#ed645a47
//	case *tdapi.MessageSponsorTypePrivateChannel: // messageSponsorTypePrivateChannel#74d245a8
//	case *tdapi.MessageSponsorTypeWebsite: // messageSponsorTypeWebsite#a4e45f9b
//	default: panic(v)
//	}
type MessageSponsorTypeClass interface {
	bin.Encoder
	bin.Decoder
	bin.BareEncoder
	bin.BareDecoder
	construct() MessageSponsorTypeClass

	// TypeID returns type id in TL schema.
	//
	// See https://core.telegram.org/mtproto/TL-tl#remarks.
	TypeID() uint32
	// TypeName returns name of type in TL schema.
	TypeName() string
	// String implements fmt.Stringer.
	String() string
	// Zero returns true if current object has a zero value.
	Zero() bool

	EncodeTDLibJSON(b tdjson.Encoder) error
	DecodeTDLibJSON(b tdjson.Decoder) error
}

// DecodeMessageSponsorType implements binary de-serialization for MessageSponsorTypeClass.
func DecodeMessageSponsorType(buf *bin.Buffer) (MessageSponsorTypeClass, error) {
	id, err := buf.PeekID()
	if err != nil {
		return nil, err
	}
	switch id {
	case MessageSponsorTypeBotTypeID:
		// Decoding messageSponsorTypeBot#700d2304.
		v := MessageSponsorTypeBot{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageSponsorTypeClass: %w", err)
		}
		return &v, nil
	case MessageSponsorTypePublicChannelTypeID:
		// Decoding messageSponsorTypePublicChannel#ed645a47.
		v := MessageSponsorTypePublicChannel{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageSponsorTypeClass: %w", err)
		}
		return &v, nil
	case MessageSponsorTypePrivateChannelTypeID:
		// Decoding messageSponsorTypePrivateChannel#74d245a8.
		v := MessageSponsorTypePrivateChannel{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageSponsorTypeClass: %w", err)
		}
		return &v, nil
	case MessageSponsorTypeWebsiteTypeID:
		// Decoding messageSponsorTypeWebsite#a4e45f9b.
		v := MessageSponsorTypeWebsite{}
		if err := v.Decode(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageSponsorTypeClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode MessageSponsorTypeClass: %w", bin.NewUnexpectedID(id))
	}
}

// DecodeTDLibJSONMessageSponsorType implements binary de-serialization for MessageSponsorTypeClass.
func DecodeTDLibJSONMessageSponsorType(buf tdjson.Decoder) (MessageSponsorTypeClass, error) {
	id, err := buf.FindTypeID()
	if err != nil {
		return nil, err
	}
	switch id {
	case "messageSponsorTypeBot":
		// Decoding messageSponsorTypeBot#700d2304.
		v := MessageSponsorTypeBot{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageSponsorTypeClass: %w", err)
		}
		return &v, nil
	case "messageSponsorTypePublicChannel":
		// Decoding messageSponsorTypePublicChannel#ed645a47.
		v := MessageSponsorTypePublicChannel{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageSponsorTypeClass: %w", err)
		}
		return &v, nil
	case "messageSponsorTypePrivateChannel":
		// Decoding messageSponsorTypePrivateChannel#74d245a8.
		v := MessageSponsorTypePrivateChannel{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageSponsorTypeClass: %w", err)
		}
		return &v, nil
	case "messageSponsorTypeWebsite":
		// Decoding messageSponsorTypeWebsite#a4e45f9b.
		v := MessageSponsorTypeWebsite{}
		if err := v.DecodeTDLibJSON(buf); err != nil {
			return nil, fmt.Errorf("unable to decode MessageSponsorTypeClass: %w", err)
		}
		return &v, nil
	default:
		return nil, fmt.Errorf("unable to decode MessageSponsorTypeClass: %w", tdjson.NewUnexpectedID(id))
	}
}

// MessageSponsorType boxes the MessageSponsorTypeClass providing a helper.
type MessageSponsorTypeBox struct {
	MessageSponsorType MessageSponsorTypeClass
}

// Decode implements bin.Decoder for MessageSponsorTypeBox.
func (b *MessageSponsorTypeBox) Decode(buf *bin.Buffer) error {
	if b == nil {
		return fmt.Errorf("unable to decode MessageSponsorTypeBox to nil")
	}
	v, err := DecodeMessageSponsorType(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.MessageSponsorType = v
	return nil
}

// Encode implements bin.Encode for MessageSponsorTypeBox.
func (b *MessageSponsorTypeBox) Encode(buf *bin.Buffer) error {
	if b == nil || b.MessageSponsorType == nil {
		return fmt.Errorf("unable to encode MessageSponsorTypeClass as nil")
	}
	return b.MessageSponsorType.Encode(buf)
}

// DecodeTDLibJSON implements bin.Decoder for MessageSponsorTypeBox.
func (b *MessageSponsorTypeBox) DecodeTDLibJSON(buf tdjson.Decoder) error {
	if b == nil {
		return fmt.Errorf("unable to decode MessageSponsorTypeBox to nil")
	}
	v, err := DecodeTDLibJSONMessageSponsorType(buf)
	if err != nil {
		return fmt.Errorf("unable to decode boxed value: %w", err)
	}
	b.MessageSponsorType = v
	return nil
}

// EncodeTDLibJSON implements bin.Encode for MessageSponsorTypeBox.
func (b *MessageSponsorTypeBox) EncodeTDLibJSON(buf tdjson.Encoder) error {
	if b == nil || b.MessageSponsorType == nil {
		return fmt.Errorf("unable to encode MessageSponsorTypeClass as nil")
	}
	return b.MessageSponsorType.EncodeTDLibJSON(buf)
}
