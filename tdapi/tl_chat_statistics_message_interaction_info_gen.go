// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// ChatStatisticsMessageInteractionInfo represents TL type `chatStatisticsMessageInteractionInfo#d25e2a2c`.
type ChatStatisticsMessageInteractionInfo struct {
	// Message identifier
	MessageID int64
	// Number of times the message was viewed
	ViewCount int32
	// Number of times the message was forwarded
	ForwardCount int32
}

// ChatStatisticsMessageInteractionInfoTypeID is TL type id of ChatStatisticsMessageInteractionInfo.
const ChatStatisticsMessageInteractionInfoTypeID = 0xd25e2a2c

// Ensuring interfaces in compile-time for ChatStatisticsMessageInteractionInfo.
var (
	_ bin.Encoder     = &ChatStatisticsMessageInteractionInfo{}
	_ bin.Decoder     = &ChatStatisticsMessageInteractionInfo{}
	_ bin.BareEncoder = &ChatStatisticsMessageInteractionInfo{}
	_ bin.BareDecoder = &ChatStatisticsMessageInteractionInfo{}
)

func (c *ChatStatisticsMessageInteractionInfo) Zero() bool {
	if c == nil {
		return true
	}
	if !(c.MessageID == 0) {
		return false
	}
	if !(c.ViewCount == 0) {
		return false
	}
	if !(c.ForwardCount == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (c *ChatStatisticsMessageInteractionInfo) String() string {
	if c == nil {
		return "ChatStatisticsMessageInteractionInfo(nil)"
	}
	type Alias ChatStatisticsMessageInteractionInfo
	return fmt.Sprintf("ChatStatisticsMessageInteractionInfo%+v", Alias(*c))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ChatStatisticsMessageInteractionInfo) TypeID() uint32 {
	return ChatStatisticsMessageInteractionInfoTypeID
}

// TypeName returns name of type in TL schema.
func (*ChatStatisticsMessageInteractionInfo) TypeName() string {
	return "chatStatisticsMessageInteractionInfo"
}

// TypeInfo returns info about TL type.
func (c *ChatStatisticsMessageInteractionInfo) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "chatStatisticsMessageInteractionInfo",
		ID:   ChatStatisticsMessageInteractionInfoTypeID,
	}
	if c == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "MessageID",
			SchemaName: "message_id",
		},
		{
			Name:       "ViewCount",
			SchemaName: "view_count",
		},
		{
			Name:       "ForwardCount",
			SchemaName: "forward_count",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (c *ChatStatisticsMessageInteractionInfo) Encode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chatStatisticsMessageInteractionInfo#d25e2a2c as nil")
	}
	b.PutID(ChatStatisticsMessageInteractionInfoTypeID)
	return c.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (c *ChatStatisticsMessageInteractionInfo) EncodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't encode chatStatisticsMessageInteractionInfo#d25e2a2c as nil")
	}
	b.PutInt53(c.MessageID)
	b.PutInt32(c.ViewCount)
	b.PutInt32(c.ForwardCount)
	return nil
}

// Decode implements bin.Decoder.
func (c *ChatStatisticsMessageInteractionInfo) Decode(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chatStatisticsMessageInteractionInfo#d25e2a2c to nil")
	}
	if err := b.ConsumeID(ChatStatisticsMessageInteractionInfoTypeID); err != nil {
		return fmt.Errorf("unable to decode chatStatisticsMessageInteractionInfo#d25e2a2c: %w", err)
	}
	return c.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (c *ChatStatisticsMessageInteractionInfo) DecodeBare(b *bin.Buffer) error {
	if c == nil {
		return fmt.Errorf("can't decode chatStatisticsMessageInteractionInfo#d25e2a2c to nil")
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode chatStatisticsMessageInteractionInfo#d25e2a2c: field message_id: %w", err)
		}
		c.MessageID = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode chatStatisticsMessageInteractionInfo#d25e2a2c: field view_count: %w", err)
		}
		c.ViewCount = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode chatStatisticsMessageInteractionInfo#d25e2a2c: field forward_count: %w", err)
		}
		c.ForwardCount = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (c *ChatStatisticsMessageInteractionInfo) EncodeTDLibJSON(b tdjson.Encoder) error {
	if c == nil {
		return fmt.Errorf("can't encode chatStatisticsMessageInteractionInfo#d25e2a2c as nil")
	}
	b.ObjStart()
	b.PutID("chatStatisticsMessageInteractionInfo")
	b.Comma()
	b.FieldStart("message_id")
	b.PutInt53(c.MessageID)
	b.Comma()
	b.FieldStart("view_count")
	b.PutInt32(c.ViewCount)
	b.Comma()
	b.FieldStart("forward_count")
	b.PutInt32(c.ForwardCount)
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (c *ChatStatisticsMessageInteractionInfo) DecodeTDLibJSON(b tdjson.Decoder) error {
	if c == nil {
		return fmt.Errorf("can't decode chatStatisticsMessageInteractionInfo#d25e2a2c to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("chatStatisticsMessageInteractionInfo"); err != nil {
				return fmt.Errorf("unable to decode chatStatisticsMessageInteractionInfo#d25e2a2c: %w", err)
			}
		case "message_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode chatStatisticsMessageInteractionInfo#d25e2a2c: field message_id: %w", err)
			}
			c.MessageID = value
		case "view_count":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode chatStatisticsMessageInteractionInfo#d25e2a2c: field view_count: %w", err)
			}
			c.ViewCount = value
		case "forward_count":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode chatStatisticsMessageInteractionInfo#d25e2a2c: field forward_count: %w", err)
			}
			c.ForwardCount = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetMessageID returns value of MessageID field.
func (c *ChatStatisticsMessageInteractionInfo) GetMessageID() (value int64) {
	if c == nil {
		return
	}
	return c.MessageID
}

// GetViewCount returns value of ViewCount field.
func (c *ChatStatisticsMessageInteractionInfo) GetViewCount() (value int32) {
	if c == nil {
		return
	}
	return c.ViewCount
}

// GetForwardCount returns value of ForwardCount field.
func (c *ChatStatisticsMessageInteractionInfo) GetForwardCount() (value int32) {
	if c == nil {
		return
	}
	return c.ForwardCount
}
