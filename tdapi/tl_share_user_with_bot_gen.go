// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// ShareUserWithBotRequest represents TL type `shareUserWithBot#f132ffdc`.
type ShareUserWithBotRequest struct {
	// Identifier of the chat with the bot
	ChatID int64
	// Identifier of the message with the button
	MessageID int64
	// Identifier of the button
	ButtonID int32
	// Identifier of the shared user
	SharedUserID int64
	// Pass true to check that the user can be shared by the button instead of actually
	// sharing them
	OnlyCheck bool
}

// ShareUserWithBotRequestTypeID is TL type id of ShareUserWithBotRequest.
const ShareUserWithBotRequestTypeID = 0xf132ffdc

// Ensuring interfaces in compile-time for ShareUserWithBotRequest.
var (
	_ bin.Encoder     = &ShareUserWithBotRequest{}
	_ bin.Decoder     = &ShareUserWithBotRequest{}
	_ bin.BareEncoder = &ShareUserWithBotRequest{}
	_ bin.BareDecoder = &ShareUserWithBotRequest{}
)

func (s *ShareUserWithBotRequest) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.ChatID == 0) {
		return false
	}
	if !(s.MessageID == 0) {
		return false
	}
	if !(s.ButtonID == 0) {
		return false
	}
	if !(s.SharedUserID == 0) {
		return false
	}
	if !(s.OnlyCheck == false) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *ShareUserWithBotRequest) String() string {
	if s == nil {
		return "ShareUserWithBotRequest(nil)"
	}
	type Alias ShareUserWithBotRequest
	return fmt.Sprintf("ShareUserWithBotRequest%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ShareUserWithBotRequest) TypeID() uint32 {
	return ShareUserWithBotRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*ShareUserWithBotRequest) TypeName() string {
	return "shareUserWithBot"
}

// TypeInfo returns info about TL type.
func (s *ShareUserWithBotRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "shareUserWithBot",
		ID:   ShareUserWithBotRequestTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "ChatID",
			SchemaName: "chat_id",
		},
		{
			Name:       "MessageID",
			SchemaName: "message_id",
		},
		{
			Name:       "ButtonID",
			SchemaName: "button_id",
		},
		{
			Name:       "SharedUserID",
			SchemaName: "shared_user_id",
		},
		{
			Name:       "OnlyCheck",
			SchemaName: "only_check",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (s *ShareUserWithBotRequest) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode shareUserWithBot#f132ffdc as nil")
	}
	b.PutID(ShareUserWithBotRequestTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *ShareUserWithBotRequest) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode shareUserWithBot#f132ffdc as nil")
	}
	b.PutInt53(s.ChatID)
	b.PutInt53(s.MessageID)
	b.PutInt32(s.ButtonID)
	b.PutInt53(s.SharedUserID)
	b.PutBool(s.OnlyCheck)
	return nil
}

// Decode implements bin.Decoder.
func (s *ShareUserWithBotRequest) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode shareUserWithBot#f132ffdc to nil")
	}
	if err := b.ConsumeID(ShareUserWithBotRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode shareUserWithBot#f132ffdc: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *ShareUserWithBotRequest) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode shareUserWithBot#f132ffdc to nil")
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode shareUserWithBot#f132ffdc: field chat_id: %w", err)
		}
		s.ChatID = value
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode shareUserWithBot#f132ffdc: field message_id: %w", err)
		}
		s.MessageID = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode shareUserWithBot#f132ffdc: field button_id: %w", err)
		}
		s.ButtonID = value
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode shareUserWithBot#f132ffdc: field shared_user_id: %w", err)
		}
		s.SharedUserID = value
	}
	{
		value, err := b.Bool()
		if err != nil {
			return fmt.Errorf("unable to decode shareUserWithBot#f132ffdc: field only_check: %w", err)
		}
		s.OnlyCheck = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (s *ShareUserWithBotRequest) EncodeTDLibJSON(b tdjson.Encoder) error {
	if s == nil {
		return fmt.Errorf("can't encode shareUserWithBot#f132ffdc as nil")
	}
	b.ObjStart()
	b.PutID("shareUserWithBot")
	b.Comma()
	b.FieldStart("chat_id")
	b.PutInt53(s.ChatID)
	b.Comma()
	b.FieldStart("message_id")
	b.PutInt53(s.MessageID)
	b.Comma()
	b.FieldStart("button_id")
	b.PutInt32(s.ButtonID)
	b.Comma()
	b.FieldStart("shared_user_id")
	b.PutInt53(s.SharedUserID)
	b.Comma()
	b.FieldStart("only_check")
	b.PutBool(s.OnlyCheck)
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (s *ShareUserWithBotRequest) DecodeTDLibJSON(b tdjson.Decoder) error {
	if s == nil {
		return fmt.Errorf("can't decode shareUserWithBot#f132ffdc to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("shareUserWithBot"); err != nil {
				return fmt.Errorf("unable to decode shareUserWithBot#f132ffdc: %w", err)
			}
		case "chat_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode shareUserWithBot#f132ffdc: field chat_id: %w", err)
			}
			s.ChatID = value
		case "message_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode shareUserWithBot#f132ffdc: field message_id: %w", err)
			}
			s.MessageID = value
		case "button_id":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode shareUserWithBot#f132ffdc: field button_id: %w", err)
			}
			s.ButtonID = value
		case "shared_user_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode shareUserWithBot#f132ffdc: field shared_user_id: %w", err)
			}
			s.SharedUserID = value
		case "only_check":
			value, err := b.Bool()
			if err != nil {
				return fmt.Errorf("unable to decode shareUserWithBot#f132ffdc: field only_check: %w", err)
			}
			s.OnlyCheck = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetChatID returns value of ChatID field.
func (s *ShareUserWithBotRequest) GetChatID() (value int64) {
	if s == nil {
		return
	}
	return s.ChatID
}

// GetMessageID returns value of MessageID field.
func (s *ShareUserWithBotRequest) GetMessageID() (value int64) {
	if s == nil {
		return
	}
	return s.MessageID
}

// GetButtonID returns value of ButtonID field.
func (s *ShareUserWithBotRequest) GetButtonID() (value int32) {
	if s == nil {
		return
	}
	return s.ButtonID
}

// GetSharedUserID returns value of SharedUserID field.
func (s *ShareUserWithBotRequest) GetSharedUserID() (value int64) {
	if s == nil {
		return
	}
	return s.SharedUserID
}

// GetOnlyCheck returns value of OnlyCheck field.
func (s *ShareUserWithBotRequest) GetOnlyCheck() (value bool) {
	if s == nil {
		return
	}
	return s.OnlyCheck
}

// ShareUserWithBot invokes method shareUserWithBot#f132ffdc returning error if any.
func (c *Client) ShareUserWithBot(ctx context.Context, request *ShareUserWithBotRequest) error {
	var ok Ok

	if err := c.rpc.Invoke(ctx, request, &ok); err != nil {
		return err
	}
	return nil
}
