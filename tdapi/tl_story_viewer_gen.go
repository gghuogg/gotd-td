// Code generated by gotdgen, DO NOT EDIT.

package tdapi

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// StoryViewer represents TL type `storyViewer#cf0fb132`.
type StoryViewer struct {
	// User identifier of the viewer
	UserID int64
	// Approximate point in time (Unix timestamp) when the story was viewed
	ViewDate int32
	// Block list to which the user is added; may be null if none
	BlockList BlockListClass
	// Type of the reaction that was chosen by the user; may be null if none
	ChosenReactionType ReactionTypeClass
}

// StoryViewerTypeID is TL type id of StoryViewer.
const StoryViewerTypeID = 0xcf0fb132

// Ensuring interfaces in compile-time for StoryViewer.
var (
	_ bin.Encoder     = &StoryViewer{}
	_ bin.Decoder     = &StoryViewer{}
	_ bin.BareEncoder = &StoryViewer{}
	_ bin.BareDecoder = &StoryViewer{}
)

func (s *StoryViewer) Zero() bool {
	if s == nil {
		return true
	}
	if !(s.UserID == 0) {
		return false
	}
	if !(s.ViewDate == 0) {
		return false
	}
	if !(s.BlockList == nil) {
		return false
	}
	if !(s.ChosenReactionType == nil) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (s *StoryViewer) String() string {
	if s == nil {
		return "StoryViewer(nil)"
	}
	type Alias StoryViewer
	return fmt.Sprintf("StoryViewer%+v", Alias(*s))
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*StoryViewer) TypeID() uint32 {
	return StoryViewerTypeID
}

// TypeName returns name of type in TL schema.
func (*StoryViewer) TypeName() string {
	return "storyViewer"
}

// TypeInfo returns info about TL type.
func (s *StoryViewer) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "storyViewer",
		ID:   StoryViewerTypeID,
	}
	if s == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "UserID",
			SchemaName: "user_id",
		},
		{
			Name:       "ViewDate",
			SchemaName: "view_date",
		},
		{
			Name:       "BlockList",
			SchemaName: "block_list",
		},
		{
			Name:       "ChosenReactionType",
			SchemaName: "chosen_reaction_type",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (s *StoryViewer) Encode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode storyViewer#cf0fb132 as nil")
	}
	b.PutID(StoryViewerTypeID)
	return s.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (s *StoryViewer) EncodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't encode storyViewer#cf0fb132 as nil")
	}
	b.PutInt53(s.UserID)
	b.PutInt32(s.ViewDate)
	if s.BlockList == nil {
		return fmt.Errorf("unable to encode storyViewer#cf0fb132: field block_list is nil")
	}
	if err := s.BlockList.Encode(b); err != nil {
		return fmt.Errorf("unable to encode storyViewer#cf0fb132: field block_list: %w", err)
	}
	if s.ChosenReactionType == nil {
		return fmt.Errorf("unable to encode storyViewer#cf0fb132: field chosen_reaction_type is nil")
	}
	if err := s.ChosenReactionType.Encode(b); err != nil {
		return fmt.Errorf("unable to encode storyViewer#cf0fb132: field chosen_reaction_type: %w", err)
	}
	return nil
}

// Decode implements bin.Decoder.
func (s *StoryViewer) Decode(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode storyViewer#cf0fb132 to nil")
	}
	if err := b.ConsumeID(StoryViewerTypeID); err != nil {
		return fmt.Errorf("unable to decode storyViewer#cf0fb132: %w", err)
	}
	return s.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (s *StoryViewer) DecodeBare(b *bin.Buffer) error {
	if s == nil {
		return fmt.Errorf("can't decode storyViewer#cf0fb132 to nil")
	}
	{
		value, err := b.Int53()
		if err != nil {
			return fmt.Errorf("unable to decode storyViewer#cf0fb132: field user_id: %w", err)
		}
		s.UserID = value
	}
	{
		value, err := b.Int32()
		if err != nil {
			return fmt.Errorf("unable to decode storyViewer#cf0fb132: field view_date: %w", err)
		}
		s.ViewDate = value
	}
	{
		value, err := DecodeBlockList(b)
		if err != nil {
			return fmt.Errorf("unable to decode storyViewer#cf0fb132: field block_list: %w", err)
		}
		s.BlockList = value
	}
	{
		value, err := DecodeReactionType(b)
		if err != nil {
			return fmt.Errorf("unable to decode storyViewer#cf0fb132: field chosen_reaction_type: %w", err)
		}
		s.ChosenReactionType = value
	}
	return nil
}

// EncodeTDLibJSON implements tdjson.TDLibEncoder.
func (s *StoryViewer) EncodeTDLibJSON(b tdjson.Encoder) error {
	if s == nil {
		return fmt.Errorf("can't encode storyViewer#cf0fb132 as nil")
	}
	b.ObjStart()
	b.PutID("storyViewer")
	b.Comma()
	b.FieldStart("user_id")
	b.PutInt53(s.UserID)
	b.Comma()
	b.FieldStart("view_date")
	b.PutInt32(s.ViewDate)
	b.Comma()
	b.FieldStart("block_list")
	if s.BlockList == nil {
		return fmt.Errorf("unable to encode storyViewer#cf0fb132: field block_list is nil")
	}
	if err := s.BlockList.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode storyViewer#cf0fb132: field block_list: %w", err)
	}
	b.Comma()
	b.FieldStart("chosen_reaction_type")
	if s.ChosenReactionType == nil {
		return fmt.Errorf("unable to encode storyViewer#cf0fb132: field chosen_reaction_type is nil")
	}
	if err := s.ChosenReactionType.EncodeTDLibJSON(b); err != nil {
		return fmt.Errorf("unable to encode storyViewer#cf0fb132: field chosen_reaction_type: %w", err)
	}
	b.Comma()
	b.StripComma()
	b.ObjEnd()
	return nil
}

// DecodeTDLibJSON implements tdjson.TDLibDecoder.
func (s *StoryViewer) DecodeTDLibJSON(b tdjson.Decoder) error {
	if s == nil {
		return fmt.Errorf("can't decode storyViewer#cf0fb132 to nil")
	}

	return b.Obj(func(b tdjson.Decoder, key []byte) error {
		switch string(key) {
		case tdjson.TypeField:
			if err := b.ConsumeID("storyViewer"); err != nil {
				return fmt.Errorf("unable to decode storyViewer#cf0fb132: %w", err)
			}
		case "user_id":
			value, err := b.Int53()
			if err != nil {
				return fmt.Errorf("unable to decode storyViewer#cf0fb132: field user_id: %w", err)
			}
			s.UserID = value
		case "view_date":
			value, err := b.Int32()
			if err != nil {
				return fmt.Errorf("unable to decode storyViewer#cf0fb132: field view_date: %w", err)
			}
			s.ViewDate = value
		case "block_list":
			value, err := DecodeTDLibJSONBlockList(b)
			if err != nil {
				return fmt.Errorf("unable to decode storyViewer#cf0fb132: field block_list: %w", err)
			}
			s.BlockList = value
		case "chosen_reaction_type":
			value, err := DecodeTDLibJSONReactionType(b)
			if err != nil {
				return fmt.Errorf("unable to decode storyViewer#cf0fb132: field chosen_reaction_type: %w", err)
			}
			s.ChosenReactionType = value
		default:
			return b.Skip()
		}
		return nil
	})
}

// GetUserID returns value of UserID field.
func (s *StoryViewer) GetUserID() (value int64) {
	if s == nil {
		return
	}
	return s.UserID
}

// GetViewDate returns value of ViewDate field.
func (s *StoryViewer) GetViewDate() (value int32) {
	if s == nil {
		return
	}
	return s.ViewDate
}

// GetBlockList returns value of BlockList field.
func (s *StoryViewer) GetBlockList() (value BlockListClass) {
	if s == nil {
		return
	}
	return s.BlockList
}

// GetChosenReactionType returns value of ChosenReactionType field.
func (s *StoryViewer) GetChosenReactionType() (value ReactionTypeClass) {
	if s == nil {
		return
	}
	return s.ChosenReactionType
}
